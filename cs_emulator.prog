
ZnJvbSAuYnVpbGRlciBpbXBvcnQgTGFiSW50ZXJmYWNlQXBwCg==
ZnJvbSBraXZ5LmFwcCBpbXBvcnQgQXBwCmZyb20ga2l2eS5jb3JlLndpbmRvdyBpbXBvcnQgV2luZG93Cgpmcm9tIGludGVyZmFjZS5jb250YWluZXIgaW1wb3J0IENvbnRhaW5lcgoKCmNsYXNzIExhYkludGVyZmFjZUFwcChBcHApOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0YXNrX2dyYXBoLCBjc19ncmFwaCwgKiprd2FyZ3MpOgogICAgICAgIHNlbGYudGFza19ncmFwaCA9IHRhc2tfZ3JhcGgKICAgICAgICBzZWxmLmNzX2dyYXBoID0gY3NfZ3JhcGgKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQoKICAgIGRlZiBidWlsZChzZWxmKToKICAgICAgICBXaW5kb3cuZnVsbHNjcmVlbiA9ICdhdXRvJwogICAgICAgIHJldHVybiBDb250YWluZXIoc2VsZi50YXNrX2dyYXBoLCBzZWxmLmNzX2dyYXBoKQo=
ZnJvbSAuY29udGFpbmVyIGltcG9ydCBDb250YWluZXIK
ZnJvbSAubW9kZWxpbmcgaW1wb3J0IE1vZGVsaW5nVGFiCg==
ZnJvbSAuaGVhZF9sYWJlbCBpbXBvcnQgSGVhZExhYmVsCg==
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBIZWFkTGFiZWwoTGFiZWwpOgogICAgcGFzcwo=
PEhlYWRMYWJlbD46CiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDMwMCwgMTAwCgogICAgbWFya3VwOiBUcnVlCiAgICBmb250X3NpemU6IDUwCgogICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCiAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKCiAgICBjYW52YXMuYmVmb3JlOgogICAgICAgIENvbG9yOgogICAgICAgICAgICByZ2JhOiAoMjU1LzI1NSwgOTkvMjU1LCA3MS8yNTUsIDAuOCkKICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
ZnJvbSAuZW1wdHlfbGFiZWwgaW1wb3J0IEVtcHR5TGFiZWwK
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBFbXB0eUxhYmVsKExhYmVsKToKICAgIHBhc3MK
PEVtcHR5TGFiZWw+OgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiAzMDAsIDEwMAoKICAgIG1hcmt1cDogVHJ1ZQogICAgZm9udF9zaXplOiA1MAoKICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwogICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCgogICAgY2FudmFzLmJlZm9yZToKICAgICAgICBDb2xvcjoKICAgICAgICAgICAgcmdiYTogKDAsIDAsIDAsIDAuNCkKICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvbW9kZWxpbmcvbW9kZWxfbGFiZWxzL2hlYWRfbGFiZWwvaGVhZF9sYWJlbC5rdgojOmluY2x1ZGUgaW50ZXJmYWNlL2NvbnRhaW5lci9tb2RlbGluZy9tb2RlbF9sYWJlbHMvdGFza19sYWJlbC90YXNrX2xhYmVsLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvY29udGFpbmVyL21vZGVsaW5nL21vZGVsX2xhYmVscy9mb3J3YXJkaW5nX2xhYmVsL2ZvcndhcmRpbmdfbGFiZWwua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvbW9kZWxpbmcvbW9kZWxfbGFiZWxzL2VtcHR5X2xhYmVsL2VtcHR5X2xhYmVsLmt2Cg==
PEZvcndhcmRpbmdMYWJlbD46CiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDMwMCwgMTAwCgogICAgbWFya3VwOiBUcnVlCiAgICBmb250X3NpemU6IDUwCgogICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCiAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKCiAgICBjYW52YXMuYmVmb3JlOgogICAgICAgIENvbG9yOgogICAgICAgICAgICByZ2JhOiAoNjIvMjU1LCAxNjUvMjU1LCA0Ni8yNTUsIDAuOSkKICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBGb3J3YXJkaW5nTGFiZWwoTGFiZWwpOgogICAgcGFzcwo=
ZnJvbSAuZm9yd2FyZGluZ19sYWJlbCBpbXBvcnQgRm9yd2FyZGluZ0xhYmVsCg==
ZnJvbSAuaGVhZF9sYWJlbCBpbXBvcnQgSGVhZExhYmVsCmZyb20gLnRhc2tfbGFiZWwgaW1wb3J0IFRhc2tMYWJlbApmcm9tIC5mb3J3YXJkaW5nX2xhYmVsIGltcG9ydCBGb3J3YXJkaW5nTGFiZWwKZnJvbSAuZW1wdHlfbGFiZWwgaW1wb3J0IEVtcHR5TGFiZWwK
ZnJvbSAudGFza19sYWJlbCBpbXBvcnQgVGFza0xhYmVsCg==
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBUYXNrTGFiZWwoTGFiZWwpOgogICAgcGFzcwo=
PFRhc2tMYWJlbD46CiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDMwMCwgMTAwCgogICAgbWFya3VwOiBUcnVlCiAgICBmb250X3NpemU6IDUwCgogICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCiAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKCiAgICBjYW52YXMuYmVmb3JlOgogICAgICAgIENvbG9yOgogICAgICAgICAgICByZ2JhOiAoNzIvMjU1LCA5MS8yNTUsIDI1NS8yNTUsIDAuOCkKICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXguZ3JpZGxheW91dCBpbXBvcnQgR3JpZExheW91dApmcm9tIGtpdnkudWl4LmxhYmVsIGltcG9ydCBMYWJlbApmcm9tIGtpdnkudWl4LnRleHRpbnB1dCBpbXBvcnQgVGV4dElucHV0CmZyb20ga2l2eS51aXguc3Bpbm5lciBpbXBvcnQgU3Bpbm5lcgpmcm9tIGtpdnkudWl4LnN3aXRjaCBpbXBvcnQgU3dpdGNoCmZyb20ga2l2eS5wcm9wZXJ0aWVzIGltcG9ydCBPYmplY3RQcm9wZXJ0eQpmcm9tIGtpdnkuaW5wdXQubW90aW9uZXZlbnQgaW1wb3J0IE1vdGlvbkV2ZW50Cgpmcm9tIC5tb2RlbF9sYWJlbHMgaW1wb3J0IEhlYWRMYWJlbCwgVGFza0xhYmVsICAjICwgRm9yd2FyZGluZ0xhYmVsLCBFbXB0eUxhYmVsCgoKY2xhc3MgTW9kZWxpbmdUYWIoVGFiYmVkUGFuZWxJdGVtKToKICAgIHN0YXRzX3RhYmxlOiBHcmlkTGF5b3V0ID0gT2JqZWN0UHJvcGVydHkoKQogICAgdGltZV9tYXJrOiBMYWJlbCA9IE9iamVjdFByb3BlcnR5KCkKICAgIGFjY2VsZXJhdGlvbl9tYXJrOiBMYWJlbCA9IE9iamVjdFByb3BlcnR5KCkKICAgIGVmZmljaWVuY3lfbWFyazogTGFiZWwgPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBsaW5rc19jb3VudDogVGV4dElucHV0ID0gT2JqZWN0UHJvcGVydHkoKQogICAgaW9fcHJvYzogU3dpdGNoID0gT2JqZWN0UHJvcGVydHkoKQogICAgbGlua3NfZHVwbGV4OiBTd2l0Y2ggPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBkYXRhX2ZvcndhcmRpbmc6IFNwaW5uZXIgPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBwYWNrYWdlX3NpemU6IFRleHRJbnB1dCA9IE9iamVjdFByb3BlcnR5KCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdGFza19ncmFwaF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgY29tcHV0ZXJfc3lzdGVtX3RhYjogVGFiYmVkUGFuZWxJdGVtLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi50Z190YWIgPSB0YXNrX2dyYXBoX3RhYgogICAgICAgIHNlbGYuY3NfdGFiID0gY29tcHV0ZXJfc3lzdGVtX3RhYgogICAgICAgIHNlbGYuZm9yd2FyZGluZ190eXBlcyA9ICgnTVNHJywgJ0NPTlYnKQogICAgICAgIHNlbGYuZm9yd2FyZGluZ190eXBlID0gc2VsZi5mb3J3YXJkaW5nX3R5cGVzWzBdCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKCiAgICBkZWYgb25fdG91Y2hfZG93bihzZWxmLCB0b3VjaDogTW90aW9uRXZlbnQpOgogICAgICAgIHNlbGYuZ2V0X3Jvb3Rfd2luZG93KCkuY2hpbGRyZW5bLTFdLnRhYmJlZF9wYW5lbC5zd2l0Y2hfdG8oc2VsZikKICAgICAgICBpZiBzZWxmLmNvbGxpZGVfcG9pbnQoKnRvdWNoLnBvcyk6CiAgICAgICAgICAgIHNlbGYuYnVpbGRfbW9kZWwoKQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKToKICAgICAgICBzZWxmLnN0YXRzX3RhYmxlLmNsZWFyX3dpZGdldHMoKQogICAgICAgIHNlbGYuc3RhdHNfdGFibGUuY29scyA9IGxlbihzZWxmLmNzX3RhYi5wcm9jZXNzb3JzKSArIDEKCiAgICAgICAgIyBoZWFkCiAgICAgICAgc2VsZi5zdGF0c190YWJsZS5hZGRfd2lkZ2V0KEhlYWRMYWJlbCh0ZXh0PSdOJykpCiAgICAgICAgZm9yIHByb2MgaW4gc2VsZi5jc190YWIucHJvY2Vzc29yczoKICAgICAgICAgICAgc2VsZi5zdGF0c190YWJsZS5hZGRfd2lkZ2V0KEhlYWRMYWJlbCh0ZXh0PWYnUFtzdWJde3Byb2Muc3RyX2lkfVsvc3ViXScpKQoKICAgICAgICAjIGJvZHkKICAgICAgICBzdGVwID0gMQogICAgICAgIGZvciB0YXNrIGluIHNlbGYudGdfdGFiLm5vZGVzOgogICAgICAgICAgICBmb3IgX3RpY2sgaW4gcmFuZ2UodGFzay5ub2RlX3dlaWdodCk6CiAgICAgICAgICAgICAgICBzZWxmLnN0YXRzX3RhYmxlLnJvd3MgKz0gc3RlcCA9PSBzZWxmLnN0YXRzX3RhYmxlLnJvd3MKICAgICAgICAgICAgICAgIHNlbGYuc3RhdHNfdGFibGUuYWRkX3dpZGdldChIZWFkTGFiZWwodGV4dD1zdHIoc3RlcCkpKQogICAgICAgICAgICAgICAgZm9yIF8gaW4gc2VsZi5jc190YWIucHJvY2Vzc29yczoKICAgICAgICAgICAgICAgICAgICBzZWxmLnN0YXRzX3RhYmxlLmFkZF93aWRnZXQoVGFza0xhYmVsKHRleHQ9ZidUW3N1Yl17dGFzay5zdHJfaWR9Wy9zdWJdJykpCiAgICAgICAgICAgICAgICBzdGVwICs9IDEKCiAgICAgICAgc2VsZi5zdGF0c190YWJsZS5yb3dzID0gc3RlcCAgIyBpZiBwcmV2aW91cyBgcm93c2Agd2FzIGJpZ2dlciB0aGFuIGN1cnJlbnRseSBuZWVkZWQKCiAgICAgICAgdGltZSwgYWNjLCBlZmYgPSBzZWxmLmNvdW50X3BhcmFtcygpCiAgICAgICAgc2VsZi50aW1lX21hcmsudGV4dCA9IGYnVGltZToge3RpbWV9JwogICAgICAgIHNlbGYuYWNjZWxlcmF0aW9uX21hcmsudGV4dCA9IGYnQWNjZWxlcmF0aW9uOiB7YWNjOi4yZn0nCiAgICAgICAgc2VsZi5lZmZpY2llbmN5X21hcmsudGV4dCA9IGYnRWZmaWNpZW5jeToge2VmZjouMmZ9JwoKICAgIGRlZiBjb3VudF9wYXJhbXMoc2VsZik6CiAgICAgICAgdGltZSA9IHNlbGYuc3RhdHNfdGFibGUucm93cyAtIDEKICAgICAgICBhY2MgPSBzdW0odGFzay5ub2RlX3dlaWdodCBmb3IgdGFzayBpbiBzZWxmLnRnX3RhYi5ub2RlcykgLyB0aW1lIGlmIHRpbWUgZWxzZSAxCiAgICAgICAgZWZmID0gMQogICAgICAgIHJldHVybiB0aW1lLCBhY2MsIGVmZgoKICAgIGRlZiBzZXRfZm9yd2FyZGluZ190eXBlKHNlbGYsIGZvcndhcmRpbmdfdHlwZTogc3RyKToKICAgICAgICBhc3NlcnQgZm9yd2FyZGluZ190eXBlIGluIHNlbGYuZm9yd2FyZGluZ190eXBlcywgXAogICAgICAgICAgICBmJ1Vua25vd24gZm9yd2FyZGluZyB0eXBlISB7Zm9yd2FyZGluZ190eXBlfSBnaXZlbi4gT25seSB7IiwgIi5qb2luKHNlbGYuZm9yd2FyZGluZ190eXBlcyl9IGF2YWlsYWJsZScKICAgICAgICBzZWxmLmZvcndhcmRpbmdfdHlwZSA9IGZvcndhcmRpbmdfdHlwZQo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvbW9kZWxpbmcvbW9kZWxfbGFiZWxzL21vZGVsX2xhYmVscy5rdgoKCjxNb2RlbGluZ1RhYj46CiAgICBzdGF0c190YWJsZTogc3RhdHMKICAgIHRpbWVfbWFyazogdGltZQogICAgYWNjZWxlcmF0aW9uX21hcms6IGFjY2VsZXJhdGlvbgogICAgZWZmaWNpZW5jeV9tYXJrOiBlZmZpY2llbmN5CiAgICBsaW5rc19jb3VudDogbGlua3NfY291bnQKICAgIGlvX3Byb2M6IGlvX3Byb2MKICAgIGxpbmtzX2R1cGxleDogbGlua3NfZHVwbGV4CiAgICBkYXRhX2ZvcndhcmRpbmc6IGRhdGFfZm9yd2FyZGluZwogICAgcGFja2FnZV9zaXplOiBwYWNrYWdlX3NpemUKCiAgICB0ZXh0OiAnTW9kZWxpbmcnCiAgICBmb250X3NpemU6IDQwCgogICAgQm94TGF5b3V0OgogICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgICAgICAgICBzcGFjaW5nOiAyMAoKICAgICAgICAgICAgU2Nyb2xsVmlldzoKICAgICAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQoKICAgICAgICAgICAgICAgIEdyaWRMYXlvdXQ6CiAgICAgICAgICAgICAgICAgICAgaWQ6IHN0YXRzCiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMzAKICAgICAgICAgICAgICAgICAgICBzcGFjaW5nOiAyMAoKICAgICAgICAgICAgICAgICAgICBjb2xzOiAxCiAgICAgICAgICAgICAgICAgICAgcm93czogMQoKICAgICAgICAgICAgICAgICAgICBzaXplOgogICAgICAgICAgICAgICAgICAgICAgICBtYXgoc2VsZi5wYXJlbnQuc2l6ZVswXSwgMzAgKiAyICsgMzAwICogc2VsZi5jb2xzICsgMjAgKiAoc2VsZi5jb2xzIC0gMSkpLCBcCiAgICAgICAgICAgICAgICAgICAgICAgIG1heChzZWxmLnBhcmVudC5zaXplWzFdLCAzMCAqIDIgKyAxMDAgKiBzZWxmLnJvd3MgKyAyMCAqIChzZWxmLnJvd3MgLSAxKSkKICAgICAgICAgICAgICAgICAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKCiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCgogICAgICAgICAgICAgICAgICAgIGNhbnZhcy5iZWZvcmU6CiAgICAgICAgICAgICAgICAgICAgICAgIENvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmdiYTogKDEsIDEsIDEsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIFJlY3RhbmdsZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBzZWxmLnBvcwoKICAgICAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICAgICAgc2l6ZV9oaW50X3k6IDAuMDUKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDUwLCAxMAogICAgICAgICAgICAgICAgc3BhY2luZzogNTAKCiAgICAgICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgICAgICBpZDogdGltZQogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnVGltZScKCiAgICAgICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgICAgICBpZDogYWNjZWxlcmF0aW9uCiAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBY2NlbGVyYXRpb24nCgogICAgICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICAgICAgaWQ6IGVmZmljaWVuY3kKICAgICAgICAgICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0VmZmljaWVuY3knCgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICAgICAgc2l6ZV9oaW50X3g6IE5vbmUKICAgICAgICAgICAgd2lkdGg6IDYwMCAtIDYKICAgICAgICAgICAgcGFkZGluZzogMCwgNDAwCiAgICAgICAgICAgIHNwYWNpbmc6IDUwCgogICAgICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAzMCwgNQogICAgICAgICAgICAgICAgc3BhY2luZzogNQogICAgICAgICAgICAgICAgc2l6ZV9oaW50X3k6IDAuMzUKCiAgICAgICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTGlua3M6JwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKCiAgICAgICAgICAgICAgICBUZXh0SW5wdXQ6CiAgICAgICAgICAgICAgICAgICAgaWQ6IGxpbmtzX2NvdW50CiAgICAgICAgICAgICAgICAgICAgaW5wdXRfdHlwZTogJ251bWJlcicKICAgICAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICAgICAgcGFkZGluZzogMzAsIDUKICAgICAgICAgICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnSS9PIHByb2M6JwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKCiAgICAgICAgICAgICAgICBTd2l0Y2g6CiAgICAgICAgICAgICAgICAgICAgaWQ6IGlvX3Byb2MKICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IEZhbHNlCgogICAgICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAzMCwgNQogICAgICAgICAgICAgICAgc3BhY2luZzogNQoKICAgICAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgICAgIHRleHQ6ICdEdXBsZXggbGlua3M6JwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKCiAgICAgICAgICAgICAgICBTd2l0Y2g6CiAgICAgICAgICAgICAgICAgICAgaWQ6IGxpbmtzX2R1cGxleAogICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogRmFsc2UKCiAgICAgICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAzMCwgMTUKICAgICAgICAgICAgICAgIHNwYWNpbmc6IDIwCgogICAgICAgICAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRGF0YSBmb3J3YXJkaW5nOicKICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAoKICAgICAgICAgICAgICAgICAgICBTcGlubmVyOgogICAgICAgICAgICAgICAgICAgICAgICBpZDogZGF0YV9mb3J3YXJkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHNpemVfaGludF94OiAwLjYKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogcm9vdC5mb3J3YXJkaW5nX3R5cGUKICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHJvb3QuZm9yd2FyZGluZ190eXBlcwogICAgICAgICAgICAgICAgICAgICAgICBvbl90ZXh0OiByb290LnNldF9mb3J3YXJkaW5nX3R5cGUoc2VsZi50ZXh0KQoKICAgICAgICAgICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLCAxMAogICAgICAgICAgICAgICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdQYWNrYWdlIHNpemU6JwogICAgICAgICAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCgogICAgICAgICAgICAgICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHBhY2thZ2Vfc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF90eXBlOiAnbnVtYmVyJwogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seTogZGF0YV9mb3J3YXJkaW5nLnRleHQgPT0gJ01TRycK
ZnJvbSBraXZ5LnVpeC5ib3hsYXlvdXQgaW1wb3J0IEJveExheW91dApmcm9tIGtpdnkudWl4LnRhYmJlZHBhbmVsIGltcG9ydCBUYWJiZWRQYW5lbApmcm9tIGtpdnkucHJvcGVydGllcyBpbXBvcnQgT2JqZWN0UHJvcGVydHkKCmZyb20gZ3JhcGggaW1wb3J0IEdyYXBoCmZyb20gLnRhc2tfZ3JhcGggaW1wb3J0IFRhc2tHcmFwaFRhYgpmcm9tIC5jb21wdXRlcl9zeXN0ZW0gaW1wb3J0IENvbXB1dGVyU3lzdGVtVGFiCmZyb20gLm1vZGVsaW5nIGltcG9ydCBNb2RlbGluZ1RhYgpmcm9tIC5yZXN1bHRzIGltcG9ydCBSZXN1bHRzVGFiCmZyb20gaW50ZXJmYWNlLnBvcHVwcyBpbXBvcnQgSW5mb1BvcHVwCgoKY2xhc3MgQ29udGFpbmVyKEJveExheW91dCk6CiAgICB0YWJiZWRfcGFuZWw6IFRhYmJlZFBhbmVsID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0YXNrX2dyYXBoOiBHcmFwaCwgY3NfZ3JhcGg6IEdyYXBoLCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLnRhYmJlZF9wYW5lbC5hZGRfd2lkZ2V0KFRhc2tHcmFwaFRhYih0YXNrX2dyYXBoKSkKICAgICAgICBzZWxmLnRhYmJlZF9wYW5lbC5hZGRfd2lkZ2V0KENvbXB1dGVyU3lzdGVtVGFiKGNzX2dyYXBoKSkKICAgICAgICBzZWxmLnRhYmJlZF9wYW5lbC5hZGRfd2lkZ2V0KE1vZGVsaW5nVGFiKCpzZWxmLnRhYmJlZF9wYW5lbC50YWJfbGlzdFs6Oi0xXSkpCiAgICAgICAgc2VsZi50YWJiZWRfcGFuZWwuYWRkX3dpZGdldChSZXN1bHRzVGFiKHNlbGYudGFiYmVkX3BhbmVsLnRhYl9saXN0Wy0xXSkpCiAgICAgICAgc2VsZi50YWJiZWRfcGFuZWwuZGVmYXVsdF90YWIgPSBzZWxmLnRhYmJlZF9wYW5lbC50YWJfbGlzdFstMV0KCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgc2hvd19oZWxwKCk6CiAgICAgICAgSW5mb1BvcHVwKCfQn9C+0LzQvtGJ0YwnLCAn0JHQvtCzINCyINC/0L7QvNC+0YnRjCcpLm9wZW4oKQoKICAgICMgZGVmIGV4aXRfYXBwKHNlbGYpOgogICAgIyAgICAgc2VsZi5nZXRfcm9vdF93aW5kb3coKQo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9ub2RlL25vZGUua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9lZGdlL2VkZ2Uua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9wb3B1cHMvcG9wdXBzLmt2CgoKPFRhc2tHcmFwaFRhYj46CiAgICBsYXlvdXQ6IGdyYXBoX2xheW91dAoKICAgIGRvX2RlZmF1bHRfdGFiOiBUcnVlCiAgICB0ZXh0OiAnVGFzayBHcmFwaCcKICAgIGZvbnRfc2l6ZTogNDAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgc3BhY2luZzogNQoKICAgICAgICBTY3JvbGxWaWV3OgogICAgICAgICAgICBzaXplOiBzZWxmLnNpemUKCiAgICAgICAgICAgIEZsb2F0TGF5b3V0OgogICAgICAgICAgICAgICAgaWQ6IGdyYXBoX2xheW91dAogICAgICAgICAgICAgICAgc2l6ZTogc2VsZi5wYXJlbnQuc2l6ZQogICAgICAgICAgICAgICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgICAgICAgICAgICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwoKICAgICAgICAgICAgICAgIGNhbnZhcy5iZWZvcmU6CiAgICAgICAgICAgICAgICAgICAgQ29sb3I6CiAgICAgICAgICAgICAgICAgICAgICAgIHJnYmE6ICgxLCAxLCAxLCAxKQogICAgICAgICAgICAgICAgICAgIFJlY3RhbmdsZToKICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogc2VsZi5wb3MKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgICAgICAgICBzaXplX2hpbnRfeDogTm9uZQogICAgICAgICAgICB3aWR0aDogNjAwIC0gNgogICAgICAgICAgICBwYWRkaW5nOiAwLCA0MDAKICAgICAgICAgICAgc3BhY2luZzogNQoKICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgdGV4dDogJ0FkZCBub2RlJwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hc2tfYWRkX25vZGUoKQoKICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgdGV4dDogJ0FkZCBlZGdlJwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hc2tfYWRkX2VkZ2UoKQoKICAgICAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICAgICAgc3BhY2luZzogNQoKICAgICAgICAgICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRnJvbSBmaWxlJwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza19sb2FkKCkKCiAgICAgICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1RvIGZpbGUnCiAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QuYXNrX3NhdmVfbmFtZSgpCgogICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICB0ZXh0OiAnR2VuZXJhdGUgZ3JhcGgnCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza19nZW5lcmF0ZSgpCg==
ZnJvbSAudGFza19ncmFwaCBpbXBvcnQgVGFza0dyYXBoVGFiCmZyb20gLm5vZGUgaW1wb3J0IE5vZGUKZnJvbSAuZWRnZSBpbXBvcnQgRWRnZQo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9lZGdlL3BvcHVwcy9wb3B1cHMua3YKCgo8RWRnZT46CiAgICBpZDogZWRnZQogICAgZWRnZV9idXR0b246IGVkZ2VfYnV0dG9uLl9fc2VsZl9fCiAgICBlZGdlX21lbnU6IGVkZ2VfbWVudS5fX3NlbGZfXwogICAgdmVjdG9yOiBlZGdlX2xheW91dAoKCiAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwoKICAgIHBvczogbWluKHNlbGYuc3JjX25vZGUucG9zWzBdLCBzZWxmLmRzdF9ub2RlLnBvc1swXSkgKyA3NSwgbWluKHNlbGYuc3JjX25vZGUucG9zWzFdLCBzZWxmLmRzdF9ub2RlLnBvc1sxXSkgKyA3NQogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCgogICAgQnV0dG9uOgogICAgICAgIGlkOiBlZGdlX2J1dHRvbgogICAgICAgIGJhY2tncm91bmRfY29sb3I6ICgwLCAwLCAwLCAwKQogICAgICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwoKICAgICAgICB0ZXh0OiBzdHIocm9vdC5lZGdlX3dlaWdodCkKICAgICAgICB1bmRlcmxpbmU6IFRydWUKICAgICAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgICAgICBzaXplOiA2MCwgNTAKICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgY29sb3I6ICgwLCAwLCAwLCAxKQoKICAgICAgICBvbl9wYXJlbnQ6IGVkZ2VfbWVudS5kaXNtaXNzKCkKICAgICAgICBvbl9yZWxlYXNlOiBlZGdlX21lbnUub3BlbihzZWxmKQoKICAgIEZsb2F0TGF5b3V0OgogICAgICAgIGlkOiBlZGdlX2xheW91dAoKICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgICAgICBiYWNrZ3JvdW5kX25vcm1hbDogJycKCiAgICAgICAgY2FudmFzLmJlZm9yZToKICAgICAgICAgICAgUHVzaE1hdHJpeAogICAgICAgICAgICBDb2xvcjoKICAgICAgICAgICAgICAgIHJnYmE6ICgwLCAwLCAwLCAxKQogICAgICAgICAgICBMaW5lOgogICAgICAgICAgICAgICAgZ3JvdXA6ICdsaW5lJwogICAgICAgICAgICAgICAgd2lkdGg6IDIKICAgICAgICAgICAgUm90YXRlOgogICAgICAgICAgICAgICAgZ3JvdXA6ICdyb3RhdGlvbicKICAgICAgICAgICAgVHJpYW5nbGU6CiAgICAgICAgICAgICAgICBncm91cDogJ3RyaWFuZ2xlJwoKICAgICAgICBjYW52YXMuYWZ0ZXI6CiAgICAgICAgICAgIFBvcE1hdHJpeAoKICAgIERyb3BEb3duOgogICAgICAgIGlkOiBlZGdlX21lbnUKICAgICAgICBhdXRvX3dpZHRoOiBGYWxzZQogICAgICAgIHdpZHRoOiAyMDAKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnQ2hhbmdlIHdlaWdodCcKICAgICAgICAgICAgZm9udF9zaXplOiAzMAogICAgICAgICAgICBzaXplX2hpbnRfeTogTm9uZQogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza193ZWlnaHQoKQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdSZW1vdmUgZWRnZScKICAgICAgICAgICAgZm9udF9zaXplOiAzMAogICAgICAgICAgICBzaXplX2hpbnRfeTogTm9uZQogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LnJlbW92ZSgpCg==
ZnJvbSBtYXRoIGltcG9ydCBzcXJ0LCBhc2luLCBwaQoKZnJvbSBraXZ5LnVpeC5mbG9hdGxheW91dCBpbXBvcnQgRmxvYXRMYXlvdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5CmZyb20ga2l2eS51aXgudGFiYmVkcGFuZWwgaW1wb3J0IFRhYmJlZFBhbmVsSXRlbQoKZnJvbSAucG9wdXBzIGltcG9ydCBFZGdlQXNrV2VpZ2h0CgoKY2xhc3MgRWRnZShGbG9hdExheW91dCk6CiAgICBlZGdlX21lbnUgPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBlZGdlX2J1dHRvbiA9IE9iamVjdFByb3BlcnR5KCkKICAgIHZlY3RvciA9IE9iamVjdFByb3BlcnR5KCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZWRnZV9pZDogaW50LCBlZGdlX3dlaWdodDogaW50LCBwYXJlbnRfdGFiOiBUYWJiZWRQYW5lbEl0ZW0sIHNyY19ub2RlLCBkc3Rfbm9kZSwgKiprd2FyZ3MpOgogICAgICAgIHNlbGYuZWRnZV9pZCA9IGVkZ2VfaWQKICAgICAgICBzZWxmLmVkZ2Vfd2VpZ2h0ID0gZWRnZV93ZWlnaHQKICAgICAgICBzZWxmLnBhcmVudF90YWIgPSBwYXJlbnRfdGFiCiAgICAgICAgc2VsZi5zcmNfbm9kZSA9IHNyY19ub2RlCiAgICAgICAgc2VsZi5kc3Rfbm9kZSA9IGRzdF9ub2RlCgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5kcmF3X3ZlY3RvcigpCiAgICAgICAgc2VsZi5iaW5kKHBvcz1zZWxmLmRyYXdfdmVjdG9yKQoKICAgIGRlZiBkcmF3X3ZlY3RvcihzZWxmLCAqX2FyZ3MpOgogICAgICAgIGRpc3RhbmNlX3ggPSBzZWxmLmRzdF9ub2RlLnBvc1swXSAtIHNlbGYuc3JjX25vZGUucG9zWzBdCiAgICAgICAgZGlzdGFuY2VfeSA9IHNlbGYuZHN0X25vZGUucG9zWzFdIC0gc2VsZi5zcmNfbm9kZS5wb3NbMV0KICAgICAgICBkaXN0YW5jZSA9IHNxcnQoZGlzdGFuY2VfeCAqKiAyICsgZGlzdGFuY2VfeSAqKiAyKQogICAgICAgIHNpZ25feCA9IGRpc3RhbmNlX3ggLyBhYnMoZGlzdGFuY2VfeCkgaWYgZGlzdGFuY2VfeCBlbHNlIDEKCiAgICAgICAgc2VsZi5zaXplID0gKGFicyhkaXN0YW5jZV94KSwgYWJzKGRpc3RhbmNlX3kpKQogICAgICAgIHNlbGYuZWRnZV9idXR0b24ucG9zID0gKHNlbGYucG9zWzBdICsgc2VsZi5zaXplWzBdIC8gMiwgc2VsZi5wb3NbMV0gKyBzZWxmLnNpemVbMV0gLyAyKQoKICAgICAgICBsaW5lID0gc2VsZi52ZWN0b3IuY2FudmFzLmJlZm9yZS5nZXRfZ3JvdXAoJ2xpbmUnKVswXQogICAgICAgIGxpbmUucG9pbnRzID0gKAogICAgICAgICAgICBzZWxmLnNyY19ub2RlLnBvc1swXSArIDczICsgNzUgKiBkaXN0YW5jZV94IC8gKDAgKiogZGlzdGFuY2UgKyBkaXN0YW5jZSksCiAgICAgICAgICAgIHNlbGYuc3JjX25vZGUucG9zWzFdICsgNzMgKyA3NSAqIGRpc3RhbmNlX3kgLyAoMCAqKiBkaXN0YW5jZSArIGRpc3RhbmNlKSwKICAgICAgICAgICAgc2VsZi5kc3Rfbm9kZS5wb3NbMF0gKyA3MyAtIDc1ICogZGlzdGFuY2VfeCAvICgwICoqIGRpc3RhbmNlICsgZGlzdGFuY2UpLAogICAgICAgICAgICBzZWxmLmRzdF9ub2RlLnBvc1sxXSArIDczIC0gNzUgKiBkaXN0YW5jZV95IC8gKDAgKiogZGlzdGFuY2UgKyBkaXN0YW5jZSkKICAgICAgICApCgogICAgICAgIHRyaWFuZ2xlID0gc2VsZi52ZWN0b3IuY2FudmFzLmJlZm9yZS5nZXRfZ3JvdXAoJ3RyaWFuZ2xlJylbMF0KICAgICAgICB0cmlhbmdsZS5wb2ludHMgPSAoCiAgICAgICAgICAgIGxpbmUucG9pbnRzWzJdLCBsaW5lLnBvaW50c1szXSwKICAgICAgICAgICAgbGluZS5wb2ludHNbMl0gLSAzMCwgbGluZS5wb2ludHNbM10gLSAxNSwKICAgICAgICAgICAgbGluZS5wb2ludHNbMl0gLSAzMCwgbGluZS5wb2ludHNbM10gKyAxNQogICAgICAgICkKCiAgICAgICAgcm90YXRpb24gPSBzZWxmLnZlY3Rvci5jYW52YXMuYmVmb3JlLmdldF9ncm91cCgncm90YXRpb24nKVswXQogICAgICAgIHJvdGF0aW9uLmFuZ2xlID0gc2lnbl94ICogYXNpbihkaXN0YW5jZV95IC8gKDAgKiogZGlzdGFuY2UgKyBkaXN0YW5jZSkpICogMTgwIC8gcGkgKyAxODAgKiAwICoqICgxICsgc2lnbl94KQogICAgICAgIHJvdGF0aW9uLm9yaWdpbiA9ICh0cmlhbmdsZS5wb2ludHNbMF0sIHRyaWFuZ2xlLnBvaW50c1sxXSkKCiAgICBkZWYgYXNrX3dlaWdodChzZWxmKToKICAgICAgICBzZWxmLmVkZ2VfbWVudS5kaXNtaXNzKCkKICAgICAgICBFZGdlQXNrV2VpZ2h0KHNlbGYpLm9wZW4oKQoKICAgIGRlZiBzZXRfd2VpZ2h0KHNlbGYsIHdlaWdodDogaW50KToKICAgICAgICBzZWxmLmVkZ2Vfd2VpZ2h0ID0gd2VpZ2h0CiAgICAgICAgc2VsZi5lZGdlX2J1dHRvbi50ZXh0ID0gc3RyKHdlaWdodCkKICAgICAgICBzZWxmLnBhcmVudF90YWIuZ3JhcGguc2V0X2VkZ2Vfd2VpZ2h0KHNlbGYuZWRnZV9pZCwgd2VpZ2h0KQoKICAgIGRlZiByZW1vdmUoc2VsZik6CiAgICAgICAgc2VsZi5lZGdlX21lbnUuZGlzbWlzcygpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiLnJlbW92ZV9lZGdlKHNlbGYpCg==
ZnJvbSAuZWRnZSBpbXBvcnQgRWRnZQpmcm9tIC5wb3B1cHMgaW1wb3J0IEFza0FkZEVkZ2UK
ZnJvbSAuYXNrX2FkZF9lZGdlIGltcG9ydCBBc2tBZGRFZGdlCg==
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXgucG9wdXAgaW1wb3J0IFBvcHVwCmZyb20ga2l2eS51aXgudGV4dGlucHV0IGltcG9ydCBUZXh0SW5wdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBBc2tBZGRFZGdlKFBvcHVwKToKICAgIHNyY19ub2RlX2lkOiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBkc3Rfbm9kZV9pZDogVGV4dElucHV0ID0gT2JqZWN0UHJvcGVydHkoKQogICAgZWRnZV93ZWlnaHQ6IFRleHRJbnB1dCA9IE9iamVjdFByb3BlcnR5KCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50X3RhYjogVGFiYmVkUGFuZWxJdGVtLCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLnBhcmVudF90YWIgPSBwYXJlbnRfdGFiCgogICAgZGVmIGFkZF9lZGdlKHNlbGYpOgogICAgICAgIHNlbGYuZGlzbWlzcygpCgogICAgICAgIHRyeToKICAgICAgICAgICAgc3JjX25vZGVfaWQgPSBpbnQoc2VsZi5zcmNfbm9kZV9pZC50ZXh0KSAtIDEKICAgICAgICAgICAgZHN0X25vZGVfaWQgPSBpbnQoc2VsZi5kc3Rfbm9kZV9pZC50ZXh0KSAtIDEKCiAgICAgICAgICAgIGlmIG5vdCAwIDw9IHNyY19ub2RlX2lkIDwgbGVuKHNlbGYucGFyZW50X3RhYi5ub2Rlcyk6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYnU3JjIE5vZGUgaWQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIHtsZW4oc2VsZi5wYXJlbnRfdGFiLm5vZGVzKX0nKQoKICAgICAgICAgICAgaWYgKG5vdCAwIDw9IGRzdF9ub2RlX2lkIDwgbGVuKHNlbGYucGFyZW50X3RhYi5ub2RlcykpIG9yIFwKICAgICAgICAgICAgICAgICAgICBzcmNfbm9kZV9pZCA9PSBkc3Rfbm9kZV9pZCBvciAoc3JjX25vZGVfaWQsIGRzdF9ub2RlX2lkKSBpbiBzZWxmLnBhcmVudF90YWIuZWRnZXM6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYnRHN0IE5vZGUgaWQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIHtsZW4oc2VsZi5wYXJlbnRfdGFiLm5vZGVzKX0nKQoKICAgICAgICAgICAgd2VpZ2h0ID0gaW50KHNlbGYuZWRnZV93ZWlnaHQudGV4dCkKICAgICAgICAgICAgaWYgd2VpZ2h0IDwgMToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ1dlaWdodCBtdXN0IGJlIDEgb3IgZ3JlYXRlcicpCgogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIHZlOgogICAgICAgICAgICBFcnJvclBvcHVwKGYnTm90IGNvcnJlY3Qgbm9kZSBpZCBvciB3ZWlnaHQhXG57IiAiLmpvaW4odmUuYXJncyl9Jykub3BlbigpCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcmVudF90YWIuYWRkX2VkZ2Uod2VpZ2h0LCBzZWxmLnBhcmVudF90YWIubm9kZXNbc3JjX25vZGVfaWRdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGFyZW50X3RhYi5ub2Rlc1tkc3Rfbm9kZV9pZF0pCg==
PEFza0FkZEVkZ2U+OgogICAgc3JjX25vZGVfaWQ6IGFza19zcmNfbm9kZQogICAgZHN0X25vZGVfaWQ6IGFza19kc3Rfbm9kZQogICAgZWRnZV93ZWlnaHQ6IGFza193ZWlnaHQKCiAgICB0aXRsZTogJ0VudGVyIG5vZGVzIGlkcycKICAgIHRpdGxlX3NpemU6IDYwCgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiA2MDAsIDQ1MAoKICAgIEJveExheW91dDoKICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgICAgIHBhZGRpbmc6IDUKICAgICAgICBzcGFjaW5nOiA1CgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICB0ZXh0OiAnU3JjIE5vZGUgaWQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza19zcmNfbm9kZQogICAgICAgICAgICAgICAgaW5wdXRfdHlwZTogJ251bWJlcicKICAgICAgICAgICAgICAgIGlucHV0X2ZpbHRlcjogJ2ludCcKICAgICAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgICAgICBtdWx0aWxpbmU6IEZhbHNlCgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICB0ZXh0OiAnRHN0IE5vZGUgaWQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza19kc3Rfbm9kZQogICAgICAgICAgICAgICAgaW5wdXRfdHlwZTogJ251bWJlcicKICAgICAgICAgICAgICAgIGlucHV0X2ZpbHRlcjogJ2ludCcKICAgICAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgICAgICBtdWx0aWxpbmU6IEZhbHNlCgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICB0ZXh0OiAnV2VpZ2h0OicKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKCiAgICAgICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgICAgIGlkOiBhc2tfd2VpZ2h0CiAgICAgICAgICAgICAgICBpbnB1dF90eXBlOiAnbnVtYmVyJwogICAgICAgICAgICAgICAgaW5wdXRfZmlsdGVyOiAnaW50JwogICAgICAgICAgICAgICAgZm9jdXM6IFRydWUKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgICAgIG11bHRpbGluZTogRmFsc2UKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnQWRkJwogICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QuYWRkX2VkZ2UoKQo=
ZnJvbSAuZWRnZV9hc2tfd2VpZ2h0IGltcG9ydCBFZGdlQXNrV2VpZ2h0Cg==
PEVkZ2VBc2tXZWlnaHQ+OgogICAgZWRnZV93ZWlnaHQ6IGFza193ZWlnaHQKCiAgICB0aXRsZTogJ0VudGVyIGVkZ2Ugd2VpZ2h0JwogICAgdGl0bGVfc2l6ZTogNjAKCiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDYwMCwgMzIwCgogICAgQm94TGF5b3V0OgogICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgcGFkZGluZzogNQogICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgIHRleHQ6ICdXZWlnaHQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza193ZWlnaHQKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdTZXQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5zZXRfd2VpZ2h0KCkK
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBFZGdlQXNrV2VpZ2h0KFBvcHVwKToKICAgIGVkZ2Vfd2VpZ2h0ID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBlZGdlLCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLmVkZ2UgPSBlZGdlCgogICAgZGVmIHNldF93ZWlnaHQoc2VsZik6CiAgICAgICAgc2VsZi5kaXNtaXNzKCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICB3ZWlnaHQgPSBpbnQoc2VsZi5lZGdlX3dlaWdodC50ZXh0KQogICAgICAgICAgICBpZiB3ZWlnaHQgPCAxOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignV2VpZ2h0IG11c3QgYmUgMSBvciBncmVhdGVyJykKCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3IgYXMgdmU6CiAgICAgICAgICAgIEVycm9yUG9wdXAoZidOb3QgY29ycmVjdCBlZGdlIHdlaWdodCFcbnsiICIuam9pbih2ZS5hcmdzKX0nKS5vcGVuKCkKCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5lZGdlLnNldF93ZWlnaHQod2VpZ2h0KQo=
ZnJvbSAuYXNrX2FkZF9lZGdlIGltcG9ydCBBc2tBZGRFZGdlCmZyb20gLmVkZ2VfYXNrX3dlaWdodCBpbXBvcnQgRWRnZUFza1dlaWdodAo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9lZGdlL3BvcHVwcy9hc2tfYWRkX2VkZ2UvYXNrX2FkZF9lZGdlLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvY29udGFpbmVyL3Rhc2tfZ3JhcGgvZWRnZS9wb3B1cHMvZWRnZV9hc2tfd2VpZ2h0L2VkZ2VfYXNrX3dlaWdodC5rdgo=
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXguZmxvYXRsYXlvdXQgaW1wb3J0IEZsb2F0TGF5b3V0CmZyb20ga2l2eS5wcm9wZXJ0aWVzIGltcG9ydCBPYmplY3RQcm9wZXJ0eQoKZnJvbSBncmFwaCBpbXBvcnQgR3JhcGgKZnJvbSBpbnRlcmZhY2UucG9wdXBzIGltcG9ydCBFcnJvclBvcHVwCmZyb20gLm5vZGUgaW1wb3J0IE5vZGUsIEFza0FkZE5vZGUKZnJvbSAuZWRnZSBpbXBvcnQgRWRnZSwgQXNrQWRkRWRnZQpmcm9tIC5wb3B1cHMgaW1wb3J0IFRhc2tHcmFwaFNhdmUsIFRhc2tHcmFwaFNhdmVOYW1lLCBUYXNrR3JhcGhMb2FkTmFtZSwgQXNrR2VuZXJhdGUKCgpjbGFzcyBUYXNrR3JhcGhUYWIoVGFiYmVkUGFuZWxJdGVtKToKICAgIGxheW91dDogRmxvYXRMYXlvdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgeF9zY2FsZTogaW50ID0gMgogICAgeV9zY2FsZTogaW50ID0gMgoKICAgIG5vZGVzOiBsaXN0ID0gW10KICAgIGVkZ2VzOiBsaXN0ID0gW10KCiAgICBkZWYgX19pbml0X18oc2VsZiwgZ3JhcGg6IEdyYXBoLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi5ncmFwaCA9IGdyYXBoCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKCiAgICBkZWYgc2NhbGVfbGF5b3V0KHNlbGYpOgogICAgICAgIHNlbGYubGF5b3V0LnNpemVbMF0gKz0gc2VsZi5sYXlvdXQuc2l6ZVswXSAvLyBzZWxmLnhfc2NhbGUKICAgICAgICBzZWxmLnhfc2NhbGUgKz0gMQoKICAgICAgICBpbmNyID0gc2VsZi5sYXlvdXQuc2l6ZVsxXSAvLyBzZWxmLnlfc2NhbGUKICAgICAgICBzZWxmLmxheW91dC5zaXplWzFdICs9IGluY3IKICAgICAgICBmb3IgY2hpbGQgaW4gc2VsZi5sYXlvdXQuY2hpbGRyZW46CiAgICAgICAgICAgIGNoaWxkLnBvc1sxXSArPSBpbmNyCgogICAgICAgIHNlbGYueV9zY2FsZSArPSAxCgogICAgZGVmIGFza19hZGRfbm9kZShzZWxmKToKICAgICAgICBBc2tBZGROb2RlKHNlbGYpLm9wZW4oKQoKICAgIGRlZiBhZGRfbm9kZShzZWxmLCBub2RlX3dlaWdodDogaW50KSAtPiBOb2RlOgogICAgICAgIG5ld19ub2RlID0gTm9kZShsZW4oc2VsZi5ub2RlcyksIG5vZGVfd2VpZ2h0LCBzZWxmKQoKICAgICAgICBzZWxmLmdyYXBoLmFkZF9ub2RlKG5ld19ub2RlLm5vZGVfaWQsIG5ld19ub2RlLm5vZGVfd2VpZ2h0LCBuZXdfbm9kZS5wb3MpCiAgICAgICAgc2VsZi5sYXlvdXQuYWRkX3dpZGdldChuZXdfbm9kZSkKICAgICAgICBzZWxmLm5vZGVzLmFwcGVuZChuZXdfbm9kZSkKCiAgICAgICAgaWYgbmV3X25vZGUucG9zWzBdID4gc2VsZi5sYXlvdXQuc2l6ZVswXSAvLyBzZWxmLnhfc2NhbGU6CiAgICAgICAgICAgIHNlbGYuc2NhbGVfbGF5b3V0KCkKCiAgICAgICAgcmV0dXJuIG5ld19ub2RlCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG5vZGU6IE5vZGUpOgogICAgICAgIHNlbGYubm9kZXMucmVtb3ZlKG5vZGUpCiAgICAgICAgd2hpbGUgbm9kZS5lZGdlczoKICAgICAgICAgICAgc2VsZi5yZW1vdmVfZWRnZShub2RlLmVkZ2VzWzBdKQoKICAgICAgICBmb3IgX25vZGUgaW4gc2VsZi5ub2RlczoKICAgICAgICAgICAgaWYgX25vZGUubm9kZV9pZCA+IG5vZGUubm9kZV9pZDoKICAgICAgICAgICAgICAgIF9ub2RlLm5vZGVfcG9zID0gX25vZGUucG9zCiAgICAgICAgICAgICAgICBfbm9kZS5ub2RlX2lkIC09IDEKICAgICAgICAgICAgICAgIF9ub2RlLnN0cl9pZCA9IHN0cihfbm9kZS5ub2RlX2lkICsgMSkKICAgICAgICAgICAgICAgIF9ub2RlLm5vZGVfYnV0dG9uLnRleHQgPSBmJ3tfbm9kZS5zdHJfaWR9IHwge19ub2RlLm5vZGVfd2VpZ2h0fScKCiAgICAgICAgc2VsZi5ncmFwaC5yZW1vdmVfbm9kZShub2RlLm5vZGVfaWQpCiAgICAgICAgc2VsZi5sYXlvdXQucmVtb3ZlX3dpZGdldChub2RlKQoKICAgIGRlZiBhc2tfYWRkX2VkZ2Uoc2VsZik6CiAgICAgICAgaWYgbGVuKHNlbGYubm9kZXMpIDwgMjoKICAgICAgICAgICAgRXJyb3JQb3B1cCgnTm90IGVub3VnaCBub2RlcyFcbkFkZCBhdCBsZWFzdCAyIG5vZGVzJykub3BlbigpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIEFza0FkZEVkZ2Uoc2VsZikub3BlbigpCgogICAgZGVmIGFkZF9lZGdlKHNlbGYsIGVkZ2Vfd2VpZ2h0OiBpbnQsIHNyY19ub2RlOiBOb2RlLCBkc3Rfbm9kZTogTm9kZSkgLT4gRWRnZToKICAgICAgICBuZXdfZWRnZSA9IEVkZ2UobGVuKHNlbGYuZWRnZXMpLCBlZGdlX3dlaWdodCwgc2VsZiwgc3JjX25vZGUsIGRzdF9ub2RlKQoKICAgICAgICBzZWxmLmdyYXBoLmFkZF9lZGdlKG5ld19lZGdlLmVkZ2VfaWQsIG5ld19lZGdlLmVkZ2Vfd2VpZ2h0LCBzcmNfbm9kZS5ub2RlX2lkLCBkc3Rfbm9kZS5ub2RlX2lkKQoKICAgICAgICBpZiBzZWxmLmdyYXBoLmhhc19jeWNsZXMoKToKICAgICAgICAgICAgc2VsZi5ncmFwaC5yZW1vdmVfZWRnZShuZXdfZWRnZS5lZGdlX2lkKQogICAgICAgICAgICBFcnJvclBvcHVwKCdFcnJvciEgQ3ljbGUgZm91bmQhJykub3BlbigpCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubGF5b3V0LmFkZF93aWRnZXQobmV3X2VkZ2UpCiAgICAgICAgICAgIHNlbGYuZWRnZXMuYXBwZW5kKG5ld19lZGdlKQoKICAgICAgICAgICAgc3JjX25vZGUuZWRnZXMuYXBwZW5kKG5ld19lZGdlKQogICAgICAgICAgICBkc3Rfbm9kZS5lZGdlcy5hcHBlbmQobmV3X2VkZ2UpCgogICAgICAgIHJldHVybiBuZXdfZWRnZQoKICAgIGRlZiByZW1vdmVfZWRnZShzZWxmLCBlZGdlOiBFZGdlKToKICAgICAgICBzZWxmLmVkZ2VzLnJlbW92ZShlZGdlKQogICAgICAgIGVkZ2Uuc3JjX25vZGUuZWRnZXMucmVtb3ZlKGVkZ2UpCiAgICAgICAgZWRnZS5kc3Rfbm9kZS5lZGdlcy5yZW1vdmUoZWRnZSkKCiAgICAgICAgZm9yIF9lZGdlIGluIHNlbGYuZWRnZXM6CiAgICAgICAgICAgIGlmIF9lZGdlLmVkZ2VfaWQgPiBlZGdlLmVkZ2VfaWQ6CiAgICAgICAgICAgICAgICBfZWRnZS5lZGdlX2lkIC09IDEKCiAgICAgICAgc2VsZi5ncmFwaC5yZW1vdmVfZWRnZShlZGdlLmVkZ2VfaWQpCiAgICAgICAgc2VsZi5sYXlvdXQucmVtb3ZlX3dpZGdldChlZGdlKQoKICAgIGRlZiBhc2tfbG9hZChzZWxmKToKICAgICAgICBpZiBzZWxmLmxheW91dC5jaGlsZHJlbjoKICAgICAgICAgICAgVGFza0dyYXBoU2F2ZShzZWxmLCBzZWxmLmFza19sb2FkX25hbWUpLm9wZW4oKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBzZWxmLmFza19sb2FkX25hbWUoKQoKICAgIGRlZiBhc2tfbG9hZF9uYW1lKHNlbGYpOgogICAgICAgIFRhc2tHcmFwaExvYWROYW1lKHNlbGYpLm9wZW4oKQoKICAgIGRlZiBsb2FkKHNlbGYsIG5hbWU6IHN0cik6CiAgICAgICAgc2VsZi5jbGVhcl9ncmFwaCgpCiAgICAgICAgc2VsZi5kaXNwbGF5X2dyYXBoKCpzZWxmLmdyYXBoLmxvYWQobmFtZSkpCgogICAgZGVmIGFza19zYXZlX25hbWUoc2VsZiwgY2FsbGJhY2s9Tm9uZSk6CiAgICAgICAgaWYgbm90IHNlbGYubGF5b3V0LmNoaWxkcmVuOgogICAgICAgICAgICBFcnJvclBvcHVwKCdHcmFwaCBpcyBlbXB0eScpLm9wZW4oKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBUYXNrR3JhcGhTYXZlTmFtZShzZWxmLCBjYWxsYmFjaykub3BlbigpCgogICAgZGVmIHNhdmUoc2VsZiwgbmFtZTogc3RyLCBjYWxsYmFjaz1Ob25lKToKICAgICAgICBzZWxmLmdyYXBoLnNhdmUobmFtZSwgc2VsZi54X3NjYWxlLCBzZWxmLnlfc2NhbGUpCgogICAgICAgIGlmIGNhbGxiYWNrIGlzIG5vdCBOb25lOgogICAgICAgICAgICBjYWxsYmFjaygpCgogICAgZGVmIGFza19nZW5lcmF0ZShzZWxmKToKICAgICAgICBpZiBzZWxmLmxheW91dC5jaGlsZHJlbjoKICAgICAgICAgICAgVGFza0dyYXBoU2F2ZShzZWxmLCBzZWxmLmFza19nZW5lcmF0ZV9udW1iZXIpLm9wZW4oKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBzZWxmLmFza19nZW5lcmF0ZV9udW1iZXIoKQoKICAgIGRlZiBjbGVhcl9ncmFwaChzZWxmKToKICAgICAgICBzZWxmLmdyYXBoLmNsZWFyKCkKICAgICAgICBzZWxmLm5vZGVzLmNsZWFyKCkKICAgICAgICBzZWxmLmVkZ2VzLmNsZWFyKCkKICAgICAgICBzZWxmLmxheW91dC5jbGVhcl93aWRnZXRzKCkKCiAgICBkZWYgYXNrX2dlbmVyYXRlX251bWJlcihzZWxmKToKICAgICAgICBBc2tHZW5lcmF0ZShzZWxmKS5vcGVuKCkKCiAgICBkZWYgZ2VuZXJhdGUoc2VsZiwgbm9kZXNfbnVtYmVyOiBpbnQpOgogICAgICAgIHNlbGYuY2xlYXJfZ3JhcGgoKQogICAgICAgIHNlbGYuZGlzcGxheV9ncmFwaCgqc2VsZi5ncmFwaC5nZW5lcmF0ZShub2Rlc19udW1iZXIsIHNlbGYubGF5b3V0LnNpemUsIFtzZWxmLnhfc2NhbGUsIHNlbGYueV9zY2FsZV0pKQoKICAgIGRlZiBkaXNwbGF5X2dyYXBoKHNlbGYsIGdyYXBoOiBHcmFwaCwgc2NhbGVfbGV2ZWw6IFt0dXBsZSwgbGlzdF0pOgogICAgICAgIGZvciBub2RlIGluIGdyYXBoLm5vZGVzOgogICAgICAgICAgICBuZXdfbm9kZSA9IE5vZGUobm9kZS5ub2RlX2lkLCBub2RlLndlaWdodCwgc2VsZiwgbm9kZS5ub2RlX3BvcykKICAgICAgICAgICAgc2VsZi5sYXlvdXQuYWRkX3dpZGdldChuZXdfbm9kZSkKICAgICAgICAgICAgc2VsZi5ub2Rlcy5hcHBlbmQobmV3X25vZGUpCgogICAgICAgIGZvciBlZGdlIGluIGdyYXBoLmVkZ2VzOgogICAgICAgICAgICBzcmNfbm9kZSA9IHNlbGYubm9kZXNbZWRnZS5zcmNfbm9kZS5ub2RlX2lkXQogICAgICAgICAgICBkc3Rfbm9kZSA9IHNlbGYubm9kZXNbZWRnZS5kc3Rfbm9kZS5ub2RlX2lkXQoKICAgICAgICAgICAgbmV3X2VkZ2UgPSBFZGdlKGVkZ2UuZWRnZV9pZCwgZWRnZS53ZWlnaHQsIHNlbGYsIHNyY19ub2RlLCBkc3Rfbm9kZSkKICAgICAgICAgICAgc2VsZi5sYXlvdXQuYWRkX3dpZGdldChuZXdfZWRnZSkKICAgICAgICAgICAgc2VsZi5lZGdlcy5hcHBlbmQobmV3X2VkZ2UpCgogICAgICAgICAgICBzcmNfbm9kZS5lZGdlcy5hcHBlbmQobmV3X2VkZ2UpCiAgICAgICAgICAgIGRzdF9ub2RlLmVkZ2VzLmFwcGVuZChuZXdfZWRnZSkKCiAgICAgICAgd2hpbGUgc2VsZi54X3NjYWxlIDwgc2NhbGVfbGV2ZWxbMF0gb3Igc2VsZi55X3NjYWxlIDwgc2NhbGVfbGV2ZWxbMV06CiAgICAgICAgICAgIHNlbGYuc2NhbGVfbGF5b3V0KCkK
ZnJvbSAudGFza19ncmFwaF9zYXZlX25hbWUgaW1wb3J0IFRhc2tHcmFwaFNhdmVOYW1lCg==
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50ZXh0aW5wdXQgaW1wb3J0IFRleHRJbnB1dApmcm9tIGtpdnkudWl4LnRhYmJlZHBhbmVsIGltcG9ydCBUYWJiZWRQYW5lbEl0ZW0KZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBUYXNrR3JhcGhTYXZlTmFtZShQb3B1cCk6CiAgICBncmFwaF9uYW1lOiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgY2FsbGJhY2ssICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKICAgICAgICBzZWxmLmNhbGxiYWNrID0gY2FsbGJhY2sKCiAgICBkZWYgc2F2ZShzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQoKICAgICAgICBuYW1lID0gc2VsZi5ncmFwaF9uYW1lLnRleHQKICAgICAgICBpZiBub3QgbmFtZToKICAgICAgICAgICAgRXJyb3JQb3B1cCgnR3JhcGggbmFtZSBjYW5ub3QgYmUgZW1wdHkhJykKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHNlbGYucGFyZW50X3RhYi5zYXZlKG5hbWUsIHNlbGYuY2FsbGJhY2spCg==
PFRhc2tHcmFwaFNhdmVOYW1lPjoKICAgIGdyYXBoX25hbWU6IG5hbWUKCiAgICB0aXRsZTogJ0lucHV0IGdyYXBoIG5hbWUnCiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjUwLCAzNTAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICBwYWRkaW5nOiAxMAogICAgICAgIHNwYWNpbmc6IDEwCgogICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgaWQ6IG5hbWUKICAgICAgICAgICAgZm9jdXM6IFRydWUKICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICBtdWx0aWxpbmU6IEZhbHNlCgogICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgdGV4dDogJ1NhdmUnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgdGV4dF9zaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgaGFsaWduOiAnY2VudGVyJwogICAgICAgICAgICB2YWxpZ246ICdtaWRkbGUnCiAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3Quc2F2ZSgpCg==
ZnJvbSAuYXNrX2dlbmVyYXRlIGltcG9ydCBBc2tHZW5lcmF0ZQpmcm9tIC5zYXZlIGltcG9ydCBUYXNrR3JhcGhTYXZlCmZyb20gLnNhdmVfbmFtZSBpbXBvcnQgVGFza0dyYXBoU2F2ZU5hbWUKZnJvbSAubG9hZF9uYW1lIGltcG9ydCBUYXNrR3JhcGhMb2FkTmFtZQo=
ZnJvbSAuYXNrX2dlbmVyYXRlIGltcG9ydCBBc2tHZW5lcmF0ZQo=
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXgucG9wdXAgaW1wb3J0IFBvcHVwCmZyb20ga2l2eS51aXgudGV4dGlucHV0IGltcG9ydCBUZXh0SW5wdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBBc2tHZW5lcmF0ZShQb3B1cCk6CiAgICBub2Rlc19udW1iZXI6IFRleHRJbnB1dCA9IE9iamVjdFByb3BlcnR5KCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50X3RhYjogVGFiYmVkUGFuZWxJdGVtLCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLnBhcmVudF90YWIgPSBwYXJlbnRfdGFiCgogICAgZGVmIGdlbmVyYXRlKHNlbGYpOgogICAgICAgIHNlbGYuZGlzbWlzcygpCgogICAgICAgIHRyeToKICAgICAgICAgICAgbm9kZXMgPSBpbnQoc2VsZi5ub2Rlc19udW1iZXIudGV4dCkKICAgICAgICAgICAgaWYgbm9kZXMgPCAxOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignTm9kZXMgYW1vdW50IG11c3QgYmUgMSBvciBtb3JlJykKCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3IgYXMgdmU6CiAgICAgICAgICAgIEVycm9yUG9wdXAoZidOb3QgY29ycmVjdCBub2RlcyBhbW91bnQhXG57IiAiLmpvaW4odmUuYXJncyl9Jykub3BlbigpCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYucGFyZW50X3RhYi5nZW5lcmF0ZShub2RlcykK
PEFza0dlbmVyYXRlPjoKICAgIG5vZGVzX251bWJlcjogbm9kZXMKCiAgICB0aXRsZTogJ0dyYXBoIHBhcmFtcycKICAgIHRpdGxlX3NpemU6IDYwCgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiA2NTAsIDM1MAoKICAgIEJveExheW91dDoKICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgICAgIHBhZGRpbmc6IDEwCiAgICAgICAgc3BhY2luZzogMTAKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBwYWRkaW5nOiA1CiAgICAgICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgdGV4dDogJ05vZGVzOicKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKCiAgICAgICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgICAgIGlkOiBub2RlcwogICAgICAgICAgICAgICAgaW5wdXRfdHlwZTogJ251bWJlcicKICAgICAgICAgICAgICAgIGlucHV0X2ZpbHRlcjogJ2ludCcKICAgICAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgICAgICBtdWx0aWxpbmU6IEZhbHNlCgogICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgdGV4dDogJ0dlbmVyYXRlJwogICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgIHRleHRfc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgIGhhbGlnbjogJ2NlbnRlcicKICAgICAgICAgICAgdmFsaWduOiAnbWlkZGxlJwogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmdlbmVyYXRlKCkK
ZnJvbSAudGFza19ncmFwaF9zYXZlIGltcG9ydCBUYXNrR3JhcGhTYXZlCg==
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCgoKY2xhc3MgVGFza0dyYXBoU2F2ZShQb3B1cCk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgY2FsbGJhY2ssICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKICAgICAgICBzZWxmLmNhbGxiYWNrID0gY2FsbGJhY2sKCiAgICBkZWYgc2F2ZShzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQogICAgICAgIHNlbGYucGFyZW50X3RhYi5hc2tfc2F2ZV9uYW1lKHNlbGYuY2FsbGJhY2spCgogICAgZGVmIHNraXAoc2VsZik6CiAgICAgICAgc2VsZi5kaXNtaXNzKCkKICAgICAgICBzZWxmLmNhbGxiYWNrKCkK
PFRhc2tHcmFwaFNhdmU+OgogICAgdGl0bGU6ICdTYXZlIGdyYXBoPycKICAgIHRpdGxlX3NpemU6IDYwCgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiA2NTAsIDMwMAoKICAgIEJveExheW91dDoKICAgICAgICBwYWRkaW5nOiAyNQogICAgICAgIHNwYWNpbmc6IDEwCgogICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgdGV4dDogJ1llcycKICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICB0ZXh0X3NpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBoYWxpZ246ICdjZW50ZXInCiAgICAgICAgICAgIHZhbGlnbjogJ21pZGRsZScKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5zYXZlKCkKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnTm8nCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgdGV4dF9zaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgaGFsaWduOiAnY2VudGVyJwogICAgICAgICAgICB2YWxpZ246ICdtaWRkbGUnCiAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3Quc2tpcCgpCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9wb3B1cHMvYXNrX2dlbmVyYXRlL2Fza19nZW5lcmF0ZS5rdgojOmluY2x1ZGUgaW50ZXJmYWNlL2NvbnRhaW5lci90YXNrX2dyYXBoL3BvcHVwcy9zYXZlL3Rhc2tfZ3JhcGhfc2F2ZS5rdgojOmluY2x1ZGUgaW50ZXJmYWNlL2NvbnRhaW5lci90YXNrX2dyYXBoL3BvcHVwcy9zYXZlX25hbWUvdGFza19ncmFwaF9zYXZlX25hbWUua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9wb3B1cHMvbG9hZF9uYW1lL3Rhc2tfZ3JhcGhfbG9hZF9uYW1lLmt2Cg==
ZnJvbSBvcyBpbXBvcnQgcGF0aAoKZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50ZXh0aW5wdXQgaW1wb3J0IFRleHRJbnB1dApmcm9tIGtpdnkudWl4LnRhYmJlZHBhbmVsIGltcG9ydCBUYWJiZWRQYW5lbEl0ZW0KZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKZnJvbSBjb25maWcgaW1wb3J0IERVTVBfUEFUSAoKCmNsYXNzIFRhc2tHcmFwaExvYWROYW1lKFBvcHVwKToKICAgIGZpbGVfbmFtZTogVGV4dElucHV0ID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnRfdGFiOiBUYWJiZWRQYW5lbEl0ZW0sICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKCiAgICBkZWYgbG9hZChzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQoKICAgICAgICBuYW1lID0gc2VsZi5maWxlX25hbWUudGV4dAogICAgICAgIGlmIG5vdCBuYW1lOgogICAgICAgICAgICBFcnJvclBvcHVwKCdGaWxlIG5hbWUgY2Fubm90IGJlIGVtcHR5IScpLm9wZW4oKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBpZiBub3QgcGF0aC5leGlzdHMoRFVNUF9QQVRIIC8gZid7c2VsZi5wYXJlbnRfdGFiLmdyYXBoLmdyYXBoX3R5cGV9X3tuYW1lfS5qc29uJyk6CiAgICAgICAgICAgIEVycm9yUG9wdXAoJ0ZpbGUgbm90IGZvdW5kJykub3BlbigpCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBzZWxmLnBhcmVudF90YWIubG9hZChuYW1lKQo=
PFRhc2tHcmFwaExvYWROYW1lPjoKICAgIGZpbGVfbmFtZTogbmFtZQoKICAgIHRpdGxlOiAnSW5wdXQgZmlsZSBuYW1lJwogICAgdGl0bGVfc2l6ZTogNjAKCiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDY1MCwgMzUwCgogICAgQm94TGF5b3V0OgogICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgcGFkZGluZzogMTAKICAgICAgICBzcGFjaW5nOiAxMAoKICAgICAgICBUZXh0SW5wdXQ6CiAgICAgICAgICAgIGlkOiBuYW1lCiAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdMb2FkJwogICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgIHRleHRfc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgIGhhbGlnbjogJ2NlbnRlcicKICAgICAgICAgICAgdmFsaWduOiAnbWlkZGxlJwogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmxvYWQoKQo=
ZnJvbSAudGFza19ncmFwaF9sb2FkX25hbWUgaW1wb3J0IFRhc2tHcmFwaExvYWROYW1lCg==
ZnJvbSAubm9kZSBpbXBvcnQgTm9kZQpmcm9tIC5wb3B1cHMgaW1wb3J0IEFza0FkZE5vZGUK
ZnJvbSAuYXNrX2FkZF9ub2RlIGltcG9ydCBBc2tBZGROb2RlCmZyb20gLm5vZGVfYXNrX2FkZF9lZGdlIGltcG9ydCBOb2RlQXNrQWRkRWRnZQpmcm9tIC5ub2RlX2Fza193ZWlnaHQgaW1wb3J0IE5vZGVBc2tXZWlnaHQK
PEFza0FkZE5vZGU+OgogICAgbm9kZV93ZWlnaHQ6IGFza193ZWlnaHQKCiAgICB0aXRsZTogJ0VudGVyIG5vZGUgd2VpZ2h0JwogICAgdGl0bGVfc2l6ZTogNjAKCiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDYwMCwgMzIwCgogICAgQm94TGF5b3V0OgogICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgcGFkZGluZzogNQogICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgIHRleHQ6ICdXZWlnaHQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza193ZWlnaHQKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdBZGQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hZGRfbm9kZSgpCg==
ZnJvbSAuYXNrX2FkZF9ub2RlIGltcG9ydCBBc2tBZGROb2RlCg==
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXgucG9wdXAgaW1wb3J0IFBvcHVwCmZyb20ga2l2eS51aXgudGV4dGlucHV0IGltcG9ydCBUZXh0SW5wdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBBc2tBZGROb2RlKFBvcHVwKToKICAgIG5vZGVfd2VpZ2h0OiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgKiprd2FyZ3MpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiID0gcGFyZW50X3RhYgoKICAgIGRlZiBhZGRfbm9kZShzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdlaWdodCA9IGludChzZWxmLm5vZGVfd2VpZ2h0LnRleHQpCiAgICAgICAgICAgIGlmIHdlaWdodCA8IDE6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdXZWlnaHQgbXVzdCBiZSAxIG9yIGdyZWF0ZXInKQoKICAgICAgICBleGNlcHQgVmFsdWVFcnJvciBhcyB2ZToKICAgICAgICAgICAgRXJyb3JQb3B1cChmJ05vdCBjb3JyZWN0IG5vZGUgd2VpZ2h0IVxueyIgIi5qb2luKHZlLmFyZ3MpfScpLm9wZW4oKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnBhcmVudF90YWIuYWRkX25vZGUod2VpZ2h0KQo=
PE5vZGVBc2tXZWlnaHQ+OgogICAgbm9kZV93ZWlnaHQ6IGFza193ZWlnaHQKCiAgICB0aXRsZTogJ0VudGVyIG5vZGUgd2VpZ2h0JwogICAgdGl0bGVfc2l6ZTogNjAKCiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDYwMCwgMzIwCgogICAgQm94TGF5b3V0OgogICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgcGFkZGluZzogNQogICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgIHRleHQ6ICdXZWlnaHQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza193ZWlnaHQKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdTZXQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5zZXRfd2VpZ2h0KCkK
ZnJvbSAubm9kZV9hc2tfd2VpZ2h0IGltcG9ydCBOb2RlQXNrV2VpZ2h0Cg==
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50ZXh0aW5wdXQgaW1wb3J0IFRleHRJbnB1dApmcm9tIGtpdnkucHJvcGVydGllcyBpbXBvcnQgT2JqZWN0UHJvcGVydHkKCmZyb20gaW50ZXJmYWNlLnBvcHVwcyBpbXBvcnQgRXJyb3JQb3B1cAoKCmNsYXNzIE5vZGVBc2tXZWlnaHQoUG9wdXApOgogICAgbm9kZV93ZWlnaHQ6IFRleHRJbnB1dCA9IE9iamVjdFByb3BlcnR5KCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbm9kZSwgKiprd2FyZ3MpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5ub2RlID0gbm9kZQoKICAgIGRlZiBzZXRfd2VpZ2h0KHNlbGYpOgogICAgICAgIHNlbGYuZGlzbWlzcygpCgogICAgICAgIHRyeToKICAgICAgICAgICAgd2VpZ2h0ID0gaW50KHNlbGYubm9kZV93ZWlnaHQudGV4dCkKICAgICAgICAgICAgaWYgd2VpZ2h0IDwgMToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ1dlaWdodCBtdXN0IGJlIDEgb3IgZ3JlYXRlcicpCgogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIHZlOgogICAgICAgICAgICBFcnJvclBvcHVwKGYnTm90IGNvcnJlY3Qgbm9kZSB3ZWlnaHQhXG57IiAiLmpvaW4odmUuYXJncyl9Jykub3BlbigpCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYubm9kZS5zZXRfd2VpZ2h0KHdlaWdodCkK
ZnJvbSAubm9kZV9hc2tfYWRkX2VkZ2UgaW1wb3J0IE5vZGVBc2tBZGRFZGdlCg==
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXgucG9wdXAgaW1wb3J0IFBvcHVwCmZyb20ga2l2eS51aXgudGV4dGlucHV0IGltcG9ydCBUZXh0SW5wdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBOb2RlQXNrQWRkRWRnZShQb3B1cCk6CiAgICBkc3Rfbm9kZV9pZDogVGV4dElucHV0ID0gT2JqZWN0UHJvcGVydHkoKQogICAgZWRnZV93ZWlnaHQ6IFRleHRJbnB1dCA9IE9iamVjdFByb3BlcnR5KCkKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50X3RhYjogVGFiYmVkUGFuZWxJdGVtLCBzcmNfbm9kZSwgKiprd2FyZ3MpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiID0gcGFyZW50X3RhYgogICAgICAgIHNlbGYuc3JjX25vZGUgPSBzcmNfbm9kZQoKICAgIGRlZiBhZGRfZWRnZShzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRzdF9ub2RlX2lkID0gaW50KHNlbGYuZHN0X25vZGVfaWQudGV4dCkgLSAxCiAgICAgICAgICAgIGlmIChub3QgMCA8PSBkc3Rfbm9kZV9pZCA8IGxlbihzZWxmLnBhcmVudF90YWIubm9kZXMpKSBvciBcCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zcmNfbm9kZS5ub2RlX2lkID09IGRzdF9ub2RlX2lkIG9yIFwKICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcmVudF90YWIuZ3JhcGguYWRqX21hdHJpeFtzZWxmLnNyY19ub2RlLm5vZGVfaWRdW2RzdF9ub2RlX2lkXToKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZidEc3QgTm9kZSBpZCBtdXN0IGJlIGJldHdlZW4gMSBhbmQge2xlbihzZWxmLnBhcmVudF90YWIubm9kZXMpfScpCgogICAgICAgICAgICB3ZWlnaHQgPSBpbnQoc2VsZi5lZGdlX3dlaWdodC50ZXh0KQogICAgICAgICAgICBpZiB3ZWlnaHQgPCAxOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignV2VpZ2h0IG11c3QgYmUgMSBvciBncmVhdGVyJykKCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3IgYXMgdmU6CiAgICAgICAgICAgIEVycm9yUG9wdXAoZidOb3QgY29ycmVjdCBub2RlIGlkIG9yIHdlaWdodCFcbnsiICIuam9pbih2ZS5hcmdzKX0nKS5vcGVuKCkKCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYucGFyZW50X3RhYi5hZGRfZWRnZSh3ZWlnaHQsIHNlbGYuc3JjX25vZGUsIHNlbGYucGFyZW50X3RhYi5ub2Rlc1tkc3Rfbm9kZV9pZF0pCg==
PE5vZGVBc2tBZGRFZGdlPjoKICAgIGRzdF9ub2RlX2lkOiBhc2tfbm9kZQogICAgZWRnZV93ZWlnaHQ6IGFza193ZWlnaHQKCiAgICB0aXRsZTogJ0VudGVyIGVkZ2UgaWQnCiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjAwLCA0MDAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICBwYWRkaW5nOiA1CiAgICAgICAgc3BhY2luZzogNQoKICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgdGV4dDogJ05vZGUgaWQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza19ub2RlCiAgICAgICAgICAgICAgICBpbnB1dF90eXBlOiAnbnVtYmVyJwogICAgICAgICAgICAgICAgaW5wdXRfZmlsdGVyOiAnaW50JwogICAgICAgICAgICAgICAgZm9jdXM6IFRydWUKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgICAgIG11bHRpbGluZTogRmFsc2UKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgIHRleHQ6ICdXZWlnaHQ6JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAoKICAgICAgICAgICAgVGV4dElucHV0OgogICAgICAgICAgICAgICAgaWQ6IGFza193ZWlnaHQKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdBZGQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hZGRfZWRnZSgpCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9ub2RlL3BvcHVwcy9hc2tfYWRkX25vZGUvYXNrX2FkZF9ub2RlLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvY29udGFpbmVyL3Rhc2tfZ3JhcGgvbm9kZS9wb3B1cHMvbm9kZV9hc2tfd2VpZ2h0L25vZGVfYXNrX3dlaWdodC5rdgojOmluY2x1ZGUgaW50ZXJmYWNlL2NvbnRhaW5lci90YXNrX2dyYXBoL25vZGUvcG9wdXBzL25vZGVfYXNrX2FkZF9lZGdlL25vZGVfYXNrX2FkZF9lZGdlLmt2Cg==
ZnJvbSBraXZ5LnVpeC53aWRnZXQgaW1wb3J0IFdpZGdldEV4Y2VwdGlvbgpmcm9tIGtpdnkudWl4LmJveGxheW91dCBpbXBvcnQgQm94TGF5b3V0CmZyb20ga2l2eS51aXguYnV0dG9uIGltcG9ydCBCdXR0b24KZnJvbSBraXZ5LnVpeC5kcm9wZG93biBpbXBvcnQgRHJvcERvd24KZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS5wcm9wZXJ0aWVzIGltcG9ydCBPYmplY3RQcm9wZXJ0eQpmcm9tIGtpdnkuaW5wdXQubW90aW9uZXZlbnQgaW1wb3J0IE1vdGlvbkV2ZW50Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKZnJvbSAucG9wdXBzIGltcG9ydCBOb2RlQXNrV2VpZ2h0LCBOb2RlQXNrQWRkRWRnZQoKCmNsYXNzIE5vZGUoQm94TGF5b3V0KToKICAgIG5vZGVfYnV0dG9uOiBCdXR0b24gPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBub2RlX21lbnU6IERyb3BEb3duID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBub2RlX2lkOiBpbnQsIG5vZGVfd2VpZ2h0OiBpbnQsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgbm9kZV9wb3M9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIHNlbGYubm9kZV9pZCA9IG5vZGVfaWQKICAgICAgICBzZWxmLnN0cl9pZCA9IHN0cihub2RlX2lkICsgMSkKICAgICAgICBzZWxmLm5vZGVfd2VpZ2h0ID0gbm9kZV93ZWlnaHQKICAgICAgICBzZWxmLnBhcmVudF90YWIgPSBwYXJlbnRfdGFiCiAgICAgICAgc2VsZi5wYXJlbnRfbGF5b3V0ID0gcGFyZW50X3RhYi5sYXlvdXQKICAgICAgICBzZWxmLm5vZGVfcG9zID0gbm9kZV9wb3MKICAgICAgICBzZWxmLmVkZ2VzID0gW10KCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLmJpbmQocG9zPXNlbGYucmVkcmF3X2VkZ2VzKQoKICAgIGRlZiByZWRyYXdfZWRnZXMoc2VsZiwgKl9hcmdzKToKICAgICAgICBmb3IgZWRnZSBpbiBzZWxmLmVkZ2VzOgogICAgICAgICAgICBlZGdlLmRyYXdfdmVjdG9yKCkKCiAgICBkZWYgb25fdG91Y2hfZG93bihzZWxmLCB0b3VjaDogTW90aW9uRXZlbnQpOgogICAgICAgIGlmIHNlbGYuY29sbGlkZV9wb2ludCgqdG91Y2gucG9zKSBhbmQgbm90IHRvdWNoLmdyYWJfbGlzdDoKICAgICAgICAgICAgdG91Y2guZ3JhYihzZWxmKQoKICAgIGRlZiBvbl90b3VjaF9tb3ZlKHNlbGYsIHRvdWNoOiBNb3Rpb25FdmVudCk6CiAgICAgICAgaWYgdG91Y2guZ3JhYl9jdXJyZW50IGlzIHNlbGY6CiAgICAgICAgICAgIHNlbGYucG9zWzBdID0gbWluKHRvdWNoLnggLSB0b3VjaC54ICUgNTAsIHNlbGYucGFyZW50LnNpemVbMF0gLSBzZWxmLnBhcmVudC5zaXplWzBdICUgMzAwKQogICAgICAgICAgICBzZWxmLnBvc1sxXSA9IG1pbih0b3VjaC55IC0gdG91Y2gueSAlIDUwLCBzZWxmLnBhcmVudC5zaXplWzFdIC0gc2VsZi5wYXJlbnQuc2l6ZVsxXSAlIDMwMCkKICAgICAgICAgICAgc2VsZi5wYXJlbnRfdGFiLmdyYXBoLm5vZGVzW3NlbGYubm9kZV9pZF0ubm9kZV9wb3MgPSBzZWxmLnBvcwoKICAgIGRlZiBvbl90b3VjaF91cChzZWxmLCB0b3VjaDogTW90aW9uRXZlbnQpOgogICAgICAgIGlmIHNlbGYuY29sbGlkZV9wb2ludCgqdG91Y2gucG9zKSBhbmQgbm90IHRvdWNoLmdyYWJfbGlzdDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5ub2RlX21lbnUub3BlbihzZWxmKQogICAgICAgICAgICBleGNlcHQgV2lkZ2V0RXhjZXB0aW9uOgogICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGVsaWYgdG91Y2guZ3JhYl9jdXJyZW50IGlzIHNlbGY6CiAgICAgICAgICAgIHRvdWNoLnVuZ3JhYihzZWxmKQoKICAgIGRlZiBhc2tfd2VpZ2h0KHNlbGYpOgogICAgICAgIHNlbGYubm9kZV9tZW51LmRpc21pc3MoKQogICAgICAgIE5vZGVBc2tXZWlnaHQoc2VsZikub3BlbigpCgogICAgZGVmIHNldF93ZWlnaHQoc2VsZiwgd2VpZ2h0OiBpbnQpOgogICAgICAgIHNlbGYubm9kZV93ZWlnaHQgPSB3ZWlnaHQKICAgICAgICBzZWxmLm5vZGVfYnV0dG9uLnRleHQgPSBmJ3tzZWxmLnN0cl9pZH0gfCB7d2VpZ2h0fScKICAgICAgICBzZWxmLnBhcmVudF90YWIuZ3JhcGguc2V0X25vZGVfd2VpZ2h0KHNlbGYubm9kZV9pZCwgd2VpZ2h0KQoKICAgIGRlZiBhc2tfYWRkX2VkZ2Uoc2VsZik6CiAgICAgICAgc2VsZi5ub2RlX21lbnUuZGlzbWlzcygpCiAgICAgICAgaWYgbGVuKHNlbGYucGFyZW50X3RhYi5ub2RlcykgPCAyOgogICAgICAgICAgICBFcnJvclBvcHVwKCdOb3QgZW5vdWdoIG5vZGVzIVxuQWRkIGF0IGxlYXN0IDIgbm9kZXMnKS5vcGVuKCkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgTm9kZUFza0FkZEVkZ2Uoc2VsZi5wYXJlbnRfdGFiLCBzZWxmKS5vcGVuKCkKCiAgICBkZWYgcmVtb3ZlKHNlbGYpOgogICAgICAgIHNlbGYubm9kZV9tZW51LmRpc21pc3MoKQogICAgICAgIHNlbGYucGFyZW50X3RhYi5yZW1vdmVfbm9kZShzZWxmKQo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC9ub2RlL3BvcHVwcy9wb3B1cHMua3YKCgo8Tm9kZT46CiAgICBpZDogbm9kZQogICAgbm9kZTogbm9kZS5fX3NlbGZfXwogICAgbm9kZV9idXR0b246IG5vZGVfYnV0dG9uLl9fc2VsZl9fCiAgICBub2RlX21lbnU6IG5vZGVfbWVudS5fX3NlbGZfXwoKICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDE1MCwgMTUwCiAgICBwb3M6CiAgICAgICAgc2VsZi5ub2RlX3BvcyBpZiBzZWxmLm5vZGVfcG9zIGlzIG5vdCBOb25lIGVsc2UgXAogICAgICAgIChzZWxmLm5vZGVfaWQgKiA1MCwgXAogICAgICAgIChzZWxmLnBhcmVudF9sYXlvdXQuc2l6ZVsxXSAtIHNlbGYuc2l6ZVsxXSAtIChzZWxmLnBhcmVudF9sYXlvdXQuc2l6ZVsxXSAtIHNlbGYuc2l6ZVsxXSkgJSA1MCkgLSBcCiAgICAgICAgc2VsZi5ub2RlX2lkICogNTApCgogICAgQnV0dG9uOgogICAgICAgIGlkOiBub2RlX2J1dHRvbgogICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgIGZvbnRfc2l6ZTogNDUKICAgICAgICB0ZXh0OiAne30gfCB7fScuZm9ybWF0KHNlbGYucGFyZW50LnN0cl9pZCwgc2VsZi5wYXJlbnQubm9kZV93ZWlnaHQpCgogICAgICAgIG9uX3BhcmVudDogbm9kZV9tZW51LmRpc21pc3MoKQoKICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgICAgICBiYWNrZ3JvdW5kX25vcm1hbDogJycKICAgICAgICBjYW52YXMuYmVmb3JlOgogICAgICAgICAgICBDb2xvcjoKICAgICAgICAgICAgICAgIHJnYmE6ICgxMS8yNTUsIDE1Ni8yNTUsIDQ5LzI1NSwgMC45NSkKICAgICAgICAgICAgUm91bmRlZFJlY3RhbmdsZToKICAgICAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICAgICAgcG9zOiBzZWxmLnBvcwogICAgICAgICAgICAgICAgcmFkaXVzOiBbMTAwXQoKICAgIERyb3BEb3duOgogICAgICAgIGlkOiBub2RlX21lbnUKICAgICAgICBhdXRvX3dpZHRoOiBGYWxzZQogICAgICAgIHdpZHRoOiAyMDAKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnQ2hhbmdlIHdlaWdodCcKICAgICAgICAgICAgZm9udF9zaXplOiAzMAogICAgICAgICAgICBzaXplX2hpbnRfeTogTm9uZQogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza193ZWlnaHQoKQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdBZGQgZWRnZScKICAgICAgICAgICAgZm9udF9zaXplOiAzMAogICAgICAgICAgICBzaXplX2hpbnRfeTogTm9uZQogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza19hZGRfZWRnZSgpCgogICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgdGV4dDogJ1JlbW92ZSBub2RlJwogICAgICAgICAgICBmb250X3NpemU6IDMwCiAgICAgICAgICAgIHNpemVfaGludF95OiBOb25lCiAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QucmVtb3ZlKCkK
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvcmVzdWx0cy9xdWV1ZV9idWlsZGVyL3F1ZXVlX2J1aWxkZXIua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvcmVzdWx0cy90YWJsZV9sYWJlbHMvdGFibGVfbGFiZWxzLmt2CgoKPFJlc3VsdHNUYWI+OgogICAgbGF5b3V0OiBkaXNwbGF5X2xheW91dAoKICAgIHRleHQ6ICdSZXN1bHRzJwogICAgZm9udF9zaXplOiA0MAoKICAgIEJveExheW91dDoKICAgICAgICBzcGFjaW5nOiA1CgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgaWQ6IGRpc3BsYXlfbGF5b3V0CgogICAgICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgICAgICAgICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCgogICAgICAgICAgICBjYW52YXMuYmVmb3JlOgogICAgICAgICAgICAgICAgQ29sb3I6CiAgICAgICAgICAgICAgICAgICAgcmdiYTogKDEsIDEsIDEsIDEpCiAgICAgICAgICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgICAgICAgICAgcG9zOiBzZWxmLnBvcwoKICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgICAgIHNpemVfaGludF94OiBOb25lCiAgICAgICAgICAgIHdpZHRoOiA2MDAgLSA2CiAgICAgICAgICAgIHBhZGRpbmc6IDAsIDUwCiAgICAgICAgICAgIHNwYWNpbmc6IDEwCgogICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICB0ZXh0OiAnTGFiIDAyICgyKScKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QubGFiXzAyKCkKCiAgICAgICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgICAgIHRleHQ6ICdMYWIgMDMgKDQpJwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5sYWJfMDMoKQoKICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgdGV4dDogJ0xhYiAwNCAoOCknCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmxhYl8wNCgpCgogICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICB0ZXh0OiAnTGFiIDA1JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5sYWJfMDUoKQoKICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgdGV4dDogJ0xhYiAwNicKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QubGFiXzA2KCkKCiAgICAgICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgICAgIHRleHQ6ICdMYWIgMDcnCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmxhYl8wNygpCgogICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICB0ZXh0OiAnTGFiIDA4JwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5sYWJfMDgoKQo=
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXguYm94bGF5b3V0IGltcG9ydCBCb3hMYXlvdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKZnJvbSAucXVldWVfYnVpbGRlciBpbXBvcnQgUXVldWVCdWlsZGVyCgoKY2xhc3MgUmVzdWx0c1RhYihUYWJiZWRQYW5lbEl0ZW0pOgogICAgbGF5b3V0OiBCb3hMYXlvdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRhc2tfZ3JhcGhfdGFiOiBUYWJiZWRQYW5lbEl0ZW0sICoqa3dhcmdzKToKICAgICAgICBzZWxmLnRnX3RhYiA9IHRhc2tfZ3JhcGhfdGFiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKCiAgICBkZWYgbGFiXzAyKHNlbGYpOgogICAgICAgIGlmIG5vdCBzZWxmLnRnX3RhYi5ub2RlczoKICAgICAgICAgICAgRXJyb3JQb3B1cCgnVGFzayBncmFwaCBub3QgZm91bmQhXG5QbGVhc2UsIGJ1aWxkIHRhc2sgZ3JhcGggZmlyc3QnKS5vcGVuKCkKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGRhdGEgPSBzZWxmLnRnX3RhYi5ncmFwaC5sYWJfMDIoKQogICAgICAgIGhlYWRlcnMgPSBbJ05vZGUnLCAnVFtzdWJdQ1JbaV1pWy9pXUVbL3N1Yl0nLCAnVFtzdWJdQ1JbaV1pWy9pXVNbL3N1Yl0nLAogICAgICAgICAgICAgICAgICAgJ0Vbc3ViXVtpXWlbL2ldWy9zdWJdJywgJ0xbc3ViXVtpXWlbL2ldWy9zdWJdJywgJ0Vbc3ViXVtpXWlbL2ldWy9zdWJdIC0gTFtzdWJdW2ldaVsvaV1bL3N1Yl0nXQogICAgICAgIHZhbHVlcyA9IFsndF9lbmQnLCAndF9zdGFydCcsICdlYXJseScsICdsYXRlbHknXQogICAgICAgIHJlc3VsdHMgPSBbJ2RpZmYnXQogICAgICAgIFF1ZXVlQnVpbGRlcihkYXRhLCBoZWFkZXJzLCB2YWx1ZXMsIHJlc3VsdHMsIHNlbGYubGF5b3V0KS5zaG93KCkKCiAgICBkZWYgbGFiXzAzKHNlbGYpOgogICAgICAgIGlmIG5vdCBzZWxmLnRnX3RhYi5ub2RlczoKICAgICAgICAgICAgRXJyb3JQb3B1cCgnVGFzayBncmFwaCBub3QgZm91bmQhXG5QbGVhc2UsIGJ1aWxkIHRhc2sgZ3JhcGggZmlyc3QnKS5vcGVuKCkKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGRhdGEgPSBzZWxmLnRnX3RhYi5ncmFwaC5sYWJfMDMoKQogICAgICAgIGhlYWRlcnMgPSBbJ05vZGUnLCAnTltzdWJdQ1JbaV1pWy9pXUVbL3N1Yl0nLCAnU1tzdWJdVltpXWlbL2ldWy9zdWJdJ10KICAgICAgICB2YWx1ZXMgPSBbXQogICAgICAgIHJlc3VsdHMgPSBbJ2NwbCcsICdjb25zJ10KICAgICAgICBRdWV1ZUJ1aWxkZXIoZGF0YSwgaGVhZGVycywgdmFsdWVzLCByZXN1bHRzLCBzZWxmLmxheW91dCkuc2hvdygpCgogICAgZGVmIGxhYl8wNChzZWxmKToKICAgICAgICBpZiBub3Qgc2VsZi50Z190YWIubm9kZXM6CiAgICAgICAgICAgIEVycm9yUG9wdXAoJ1Rhc2sgZ3JhcGggbm90IGZvdW5kIVxuUGxlYXNlLCBidWlsZCB0YXNrIGdyYXBoIGZpcnN0Jykub3BlbigpCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBkYXRhID0gc2VsZi50Z190YWIuZ3JhcGgubGFiXzA0KCkKICAgICAgICBoZWFkZXJzID0gWydOb2RlJywgJ05bc3ViXUNSW2ldaVsvaV1TWy9zdWJdJywgJ05vZGUgd2VpZ2h0J10KICAgICAgICB2YWx1ZXMgPSBbXQogICAgICAgIHJlc3VsdHMgPSBbJ2NwbCcsICd3ZWlnaHQnXQogICAgICAgIFF1ZXVlQnVpbGRlcihkYXRhLCBoZWFkZXJzLCB2YWx1ZXMsIHJlc3VsdHMsIHNlbGYubGF5b3V0KS5zaG93KCkKCiAgICBkZWYgbGFiXzA1KHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgbGFiXzA2KHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgbGFiXzA3KHNlbGYpOgogICAgICAgIHBhc3MKCiAgICBkZWYgbGFiXzA4KHNlbGYpOgogICAgICAgIHBhc3MK
ZnJvbSAuaGVhZF9sYWJlbCBpbXBvcnQgSGVhZExhYmVsCg==
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBIZWFkTGFiZWwoTGFiZWwpOgogICAgcGFzcwo=
PEhlYWRMYWJlbD46CiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDMwMCwgMTAwCgogICAgbWFya3VwOiBUcnVlCiAgICBmb250X3NpemU6IDUwCgogICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCiAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKCiAgICBjYW52YXMuYmVmb3JlOgogICAgICAgIENvbG9yOgogICAgICAgICAgICByZ2JhOiAoMjU1LzI1NSwgOTkvMjU1LCA3MS8yNTUsIDAuOCkKICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
ZnJvbSAuZW1wdHlfbGFiZWwgaW1wb3J0IEVtcHR5TGFiZWwK
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBFbXB0eUxhYmVsKExhYmVsKToKICAgIHBhc3MK
PEVtcHR5TGFiZWw+OgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiAzMDAsIDEwMAoKICAgIG1hcmt1cDogVHJ1ZQogICAgZm9udF9zaXplOiA1MAoKICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwogICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCgogICAgY2FudmFzLmJlZm9yZToKICAgICAgICBDb2xvcjoKICAgICAgICAgICAgcmdiYTogKDAsIDAsIDAsIDAuNCkKICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
ZnJvbSAucmVzdWx0X2xhYmVsIGltcG9ydCBSZXN1bHRMYWJlbAo=
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBSZXN1bHRMYWJlbChMYWJlbCk6CiAgICBwYXNzCg==
PFJlc3VsdExhYmVsPjoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogMzAwLCAxMDAKCiAgICBtYXJrdXA6IFRydWUKICAgIGZvbnRfc2l6ZTogNTAKCiAgICBiYWNrZ3JvdW5kX25vcm1hbDogJycKICAgIGJhY2tncm91bmRfY29sb3I6ICgwLCAwLCAwLCAwKQoKICAgIGNhbnZhcy5iZWZvcmU6CiAgICAgICAgQ29sb3I6CiAgICAgICAgICAgIHJnYmE6ICg2Mi8yNTUsIDE2NS8yNTUsIDQ2LzI1NSwgMC45KQogICAgICAgIFJlY3RhbmdsZToKICAgICAgICAgICAgc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgIHBvczogc2VsZi5wb3MK
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvcmVzdWx0cy90YWJsZV9sYWJlbHMvaGVhZF9sYWJlbC9oZWFkX2xhYmVsLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvY29udGFpbmVyL3Jlc3VsdHMvdGFibGVfbGFiZWxzL3Jlc3VsdF9sYWJlbC9yZXN1bHRfbGFiZWwua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvcmVzdWx0cy90YWJsZV9sYWJlbHMvdmFsdWVfbGFiZWwvdmFsdWVfbGFiZWwua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvcmVzdWx0cy90YWJsZV9sYWJlbHMvZW1wdHlfbGFiZWwvZW1wdHlfbGFiZWwua3YK
ZnJvbSAuaGVhZF9sYWJlbCBpbXBvcnQgSGVhZExhYmVsCmZyb20gLnZhbHVlX2xhYmVsIGltcG9ydCBWYWx1ZUxhYmVsCmZyb20gLnJlc3VsdF9sYWJlbCBpbXBvcnQgUmVzdWx0TGFiZWwKZnJvbSAuZW1wdHlfbGFiZWwgaW1wb3J0IEVtcHR5TGFiZWwK
PFZhbHVlTGFiZWw+OgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiAzMDAsIDEwMAoKICAgIG1hcmt1cDogVHJ1ZQogICAgZm9udF9zaXplOiA1MAoKICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwogICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCgogICAgY2FudmFzLmJlZm9yZToKICAgICAgICBDb2xvcjoKICAgICAgICAgICAgcmdiYTogKDcyLzI1NSwgOTEvMjU1LCAyNTUvMjU1LCAwLjgpCiAgICAgICAgUmVjdGFuZ2xlOgogICAgICAgICAgICBzaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgcG9zOiBzZWxmLnBvcwo=
ZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKCgpjbGFzcyBWYWx1ZUxhYmVsKExhYmVsKToKICAgIHBhc3MK
ZnJvbSAudmFsdWVfbGFiZWwgaW1wb3J0IFZhbHVlTGFiZWwK
ZnJvbSAucmVzdWx0cyBpbXBvcnQgUmVzdWx0c1RhYgo=


ZnJvbSAucXVldWVfYnVpbGRlciBpbXBvcnQgUXVldWVCdWlsZGVyCg==
ZnJvbSBraXZ5LnVpeC5ib3hsYXlvdXQgaW1wb3J0IEJveExheW91dApmcm9tIGtpdnkudWl4LmdyaWRsYXlvdXQgaW1wb3J0IEdyaWRMYXlvdXQKZnJvbSBraXZ5LnVpeC5sYWJlbCBpbXBvcnQgTGFiZWwKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIC4udGFibGVfbGFiZWxzIGltcG9ydCBIZWFkTGFiZWwsIFZhbHVlTGFiZWwsIFJlc3VsdExhYmVsCgoKY2xhc3MgUXVldWVCdWlsZGVyKEJveExheW91dCk6CiAgICByZXN1bHRfdGFibGU6IEdyaWRMYXlvdXQgPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBjcGxfbGFiZWw6IExhYmVsID0gT2JqZWN0UHJvcGVydHkoKQogICAgcXVldWVfbGFiZWw6IExhYmVsID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBkYXRhOiBkaWN0LCBoZWFkZXJzOiBsaXN0LCB2YWx1ZXM6IGxpc3QsIHJlc3VsdHM6IGxpc3QsIHBhcmVudF9sYXlvdXQ6IEJveExheW91dCwgKiprd2FyZ3MpOgogICAgICAgIHNlbGYuZGF0YSA9IGRhdGEKICAgICAgICBzZWxmLmhlYWRlcnMgPSBoZWFkZXJzCiAgICAgICAgc2VsZi52YWx1ZXMgPSB2YWx1ZXMKICAgICAgICBzZWxmLnJlc3VsdHMgPSByZXN1bHRzCiAgICAgICAgc2VsZi5wYXJlbnRfbGF5b3V0ID0gcGFyZW50X2xheW91dAoKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucmVzdWx0X3RhYmxlLmNvbHMgPSBsZW4oc2VsZi5oZWFkZXJzKQoKICAgIGRlZiBidWlsZF9yZXN1bHRfdGFibGUoc2VsZik6CiAgICAgICAgIyBoZWFkCiAgICAgICAgZm9yIGNvbCBpbiBzZWxmLmhlYWRlcnM6CiAgICAgICAgICAgIHNlbGYucmVzdWx0X3RhYmxlLmFkZF93aWRnZXQoSGVhZExhYmVsKHRleHQ9Y29sKSkKCiAgICAgICAgIyBib2R5CiAgICAgICAgZm9yIG5vZGUgaW4gc29ydGVkKHNlbGYuZGF0YVsnbm9kZXMnXSwga2V5PWxhbWJkYSBpOiBpLm5vZGVfaWQpOgogICAgICAgICAgICBzZWxmLnJlc3VsdF90YWJsZS5yb3dzICs9IDEKICAgICAgICAgICAgc2VsZi5yZXN1bHRfdGFibGUuYWRkX3dpZGdldChIZWFkTGFiZWwodGV4dD1mJ3tub2RlLm5vZGVfaWQgKyAxfScpKQogICAgICAgICAgICBmb3IgdmFsdWUgaW4gc2VsZi52YWx1ZXM6CiAgICAgICAgICAgICAgICBzZWxmLnJlc3VsdF90YWJsZS5hZGRfd2lkZ2V0KFZhbHVlTGFiZWwodGV4dD1mJ3tzZWxmLmRhdGFbIm5vZGVzIl1bbm9kZV1bdmFsdWVdfScpKQogICAgICAgICAgICBmb3IgcmVzdWx0IGluIHNlbGYucmVzdWx0czoKICAgICAgICAgICAgICAgIHNlbGYucmVzdWx0X3RhYmxlLmFkZF93aWRnZXQoUmVzdWx0TGFiZWwodGV4dD1mJ3tzZWxmLmRhdGFbIm5vZGVzIl1bbm9kZV1bcmVzdWx0XX0nKSkKCiAgICAgICAgIyBmb290ZXIKICAgICAgICBzZWxmLmNwbF9sYWJlbC50ZXh0ID0gZidDcml0aWNhbCBwYXRoIGxlbmd0aDoge3NlbGYuZGF0YVsiQ1BMIl19JwogICAgICAgIHNlbGYucXVldWVfbGFiZWwudGV4dCA9ICcsICcuam9pbihbCiAgICAgICAgICAgIGYne25vZGUubm9kZV9pZCArIDF9KHsiLCAiLmpvaW4oW3N0cihzZWxmLmRhdGFbIm5vZGVzIl1bbm9kZV1bcmVzdWx0XSkgZm9yIHJlc3VsdCBpbiBzZWxmLnJlc3VsdHNdKX0pJwogICAgICAgICAgICBmb3Igbm9kZSBpbiBzZWxmLmRhdGFbJ3F1ZXVlJ10KICAgICAgICBdKQoKICAgIGRlZiBzaG93KHNlbGYpOgogICAgICAgIHNlbGYucGFyZW50X2xheW91dC5jbGVhcl93aWRnZXRzKCkKICAgICAgICBzZWxmLmJ1aWxkX3Jlc3VsdF90YWJsZSgpCiAgICAgICAgc2VsZi5wYXJlbnRfbGF5b3V0LmFkZF93aWRnZXQoc2VsZikK
PFF1ZXVlQnVpbGRlcj46CiAgICByZXN1bHRfdGFibGU6IHRhYmxlCiAgICBjcGxfbGFiZWw6IGNwbAogICAgcXVldWVfbGFiZWw6IHF1ZXVlCgogICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgIHNpemU6IHNlbGYuc2l6ZQoKICAgIFNjcm9sbFZpZXc6CiAgICAgICAgc2l6ZTogc2VsZi5zaXplCgogICAgICAgIEdyaWRMYXlvdXQ6CiAgICAgICAgICAgIGlkOiB0YWJsZQogICAgICAgICAgICBwYWRkaW5nOiAzMAogICAgICAgICAgICBzcGFjaW5nOiAyMAoKICAgICAgICAgICAgY29sczogMQogICAgICAgICAgICByb3dzOiAxCgogICAgICAgICAgICBzaXplOgogICAgICAgICAgICAgICAgbWF4KHNlbGYucGFyZW50LnNpemVbMF0sIDMwICogMiArIDMwMCAqIHNlbGYuY29scyArIDIwICogKHNlbGYuY29scyAtIDEpKSwgXAogICAgICAgICAgICAgICAgbWF4KHNlbGYucGFyZW50LnNpemVbMV0sIDMwICogMiArIDEwMCAqIHNlbGYucm93cyArIDIwICogKHNlbGYucm93cyAtIDEpKQogICAgICAgICAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKCiAgICAgICAgICAgIGJhY2tncm91bmRfY29sb3I6ICgwLCAwLCAwLCAwKQogICAgICAgICAgICBiYWNrZ3JvdW5kX25vcm1hbDogJycKCiAgICAgICAgICAgIGNhbnZhcy5iZWZvcmU6CiAgICAgICAgICAgICAgICBDb2xvcjoKICAgICAgICAgICAgICAgICAgICByZ2JhOiAoMSwgMSwgMSwgMSkKICAgICAgICAgICAgICAgIFJlY3RhbmdsZToKICAgICAgICAgICAgICAgICAgICBzaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgICAgICAgICBwb3M6IHNlbGYucG9zCgogICAgQm94TGF5b3V0OgogICAgICAgIHNpemVfaGludF95OiAwLjE1CiAgICAgICAgcGFkZGluZzogNTAsIDMwCiAgICAgICAgc3BhY2luZzogMjAKICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwoKICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgICAgICBiYWNrZ3JvdW5kX25vcm1hbDogJycKCiAgICAgICAgY2FudmFzLmJlZm9yZToKICAgICAgICAgICAgQ29sb3I6CiAgICAgICAgICAgICAgICByZ2JhOiAoOTYvMjU1LCA5Ni8yNTUsIDk2LzI1NSwgMSkKICAgICAgICAgICAgUmVjdGFuZ2xlOgogICAgICAgICAgICAgICAgc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgICAgICBwb3M6IHNlbGYucG9zCgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgc2l6ZV9oaW50X3k6IDAuMgoKICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICBpZDogY3BsCiAgICAgICAgICAgICAgICB0ZXh0OiAnQ3JpdGljYWwgcGF0aCBsZW5ndGgnCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDU1CgogICAgICAgIEJveExheW91dDoKCiAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgaWQ6IHF1ZXVlCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDUwCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvdGFza19ncmFwaC90YXNrX2dyYXBoLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvY29udGFpbmVyL2NvbXB1dGVyX3N5c3RlbS9jb21wdXRlcl9zeXN0ZW0ua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvbW9kZWxpbmcvbW9kZWxpbmcua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvcmVzdWx0cy9yZXN1bHRzLmt2CgoKPENvbnRhaW5lcj46CiAgICBwYWRkaW5nOiAzCgogICAgdGFiYmVkX3BhbmVsOiB0YWJzCgogICAgRmxvYXRMYXlvdXQ6CiAgICAgICAgcGFkZGluZzogMwoKICAgICAgICBUYWJiZWRQYW5lbDoKICAgICAgICAgICAgaWQ6IHRhYnMKICAgICAgICAgICAgZG9fZGVmYXVsdF90YWI6IEZhbHNlCiAgICAgICAgICAgIHRhYl93aWR0aDogKHNlbGYuc2l6ZVswXSAtIDYwMCkgLyA0IC0gMwogICAgICAgICAgICB0YWJfaGVpZ2h0OiAxMDAKCiAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICBwYWRkaW5nOiA1CiAgICAgICAgICAgIHNwYWNpbmc6IDUKICAgICAgICAgICAgcG9zOiBzZWxmLnBhcmVudC5zaXplWzBdIC0gNjAwLCBzZWxmLnBhcmVudC5zaXplWzFdIC0gMTA1CiAgICAgICAgICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgICAgICAgICBzaXplOiA2MDAsIDEwMAoKICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgdGV4dDogJ0hlbHAnCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LnNob3dfaGVscCgpCgogICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICB0ZXh0OiAnRXhpdCcKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgICAgIG9uX3JlbGVhc2U6IGFwcC5zdG9wKCkKCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kX2NvbG9yOiAoMCwgMCwgMCwgMCkKICAgICAgICAgICAgICAgIGJhY2tncm91bmRfbm9ybWFsOiAnJwoKICAgICAgICAgICAgICAgIGNhbnZhczoKICAgICAgICAgICAgICAgICAgICBDb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgcmdiYTogKDEsIDAsIDAsIDAuNSkKICAgICAgICAgICAgICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHNlbGYucG9zCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL3Byb2Nlc3Nvci9wb3B1cHMvcG9wdXBzLmt2CgoKPFByb2Nlc3Nvcj46CiAgICBpZDogcHJvY2Vzc29yCiAgICBwcm9jZXNzb3I6IHByb2Nlc3Nvci5fX3NlbGZfXwogICAgcHJvY19idXR0b246IHByb2Nlc3Nvcl9idXR0b24uX19zZWxmX18KICAgIHByb2NfbWVudTogcHJvY2Vzc29yX21lbnUuX19zZWxmX18KCiAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiAxNTAsIDE1MAogICAgcG9zOgogICAgICAgIHNlbGYucHJvY19wb3MgaWYgc2VsZi5wcm9jX3BvcyBpcyBub3QgTm9uZSBlbHNlIFwKICAgICAgICAoc2VsZi5wcm9jX2lkICogNTAsIFwKICAgICAgICAoc2VsZi5wYXJlbnRfbGF5b3V0LnNpemVbMV0gLSBzZWxmLnNpemVbMV0gLSAoc2VsZi5wYXJlbnRfbGF5b3V0LnNpemVbMV0gLSBzZWxmLnNpemVbMV0pICUgNTApIC0gXAogICAgICAgIHNlbGYucHJvY19pZCAqIDUwKQoKICAgIEJ1dHRvbjoKICAgICAgICBpZDogcHJvY2Vzc29yX2J1dHRvbgogICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgIGZvbnRfc2l6ZTogNDUKICAgICAgICB0ZXh0OiBzZWxmLnBhcmVudC5zdHJfaWQKCiAgICAgICAgb25fcGFyZW50OiBwcm9jZXNzb3JfbWVudS5kaXNtaXNzKCkKCiAgICAgICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCiAgICAgICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCiAgICAgICAgY2FudmFzLmJlZm9yZToKICAgICAgICAgICAgQ29sb3I6CiAgICAgICAgICAgICAgICByZ2JhOiAoNy8yNTUsIDkvMjU1LCAyMjQvMjU1LCAwLjgpCiAgICAgICAgICAgIFJvdW5kZWRSZWN0YW5nbGU6CiAgICAgICAgICAgICAgICBzaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgICAgIHBvczogc2VsZi5wb3MKICAgICAgICAgICAgICAgIHJhZGl1czogWzEwMF0KCiAgICBEcm9wRG93bjoKICAgICAgICBpZDogcHJvY2Vzc29yX21lbnUKICAgICAgICBhdXRvX3dpZHRoOiBGYWxzZQogICAgICAgIHdpZHRoOiAyMDAKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnQWRkIGxpbmsnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogMzAKICAgICAgICAgICAgc2l6ZV9oaW50X3k6IE5vbmUKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hc2tfYWRkX2xpbmsoKQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdSZW1vdmUgcHJvYycKICAgICAgICAgICAgZm9udF9zaXplOiAzMAogICAgICAgICAgICBzaXplX2hpbnRfeTogTm9uZQogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LnJlbW92ZSgpCg==
ZnJvbSAucHJvY2Vzc29yIGltcG9ydCBQcm9jZXNzb3IK
ZnJvbSBraXZ5LnVpeC53aWRnZXQgaW1wb3J0IFdpZGdldEV4Y2VwdGlvbgpmcm9tIGtpdnkudWl4LmJveGxheW91dCBpbXBvcnQgQm94TGF5b3V0CmZyb20ga2l2eS51aXgudGFiYmVkcGFuZWwgaW1wb3J0IFRhYmJlZFBhbmVsSXRlbQpmcm9tIGtpdnkudWl4LmJ1dHRvbiBpbXBvcnQgQnV0dG9uCmZyb20ga2l2eS51aXguZHJvcGRvd24gaW1wb3J0IERyb3BEb3duCmZyb20ga2l2eS5wcm9wZXJ0aWVzIGltcG9ydCBPYmplY3RQcm9wZXJ0eQpmcm9tIGtpdnkuaW5wdXQubW90aW9uZXZlbnQgaW1wb3J0IE1vdGlvbkV2ZW50Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKZnJvbSAucG9wdXBzIGltcG9ydCBQcm9jZXNzb3JBc2tBZGRMaW5rCgoKY2xhc3MgUHJvY2Vzc29yKEJveExheW91dCk6CiAgICBwcm9jX21lbnU6IERyb3BEb3duID0gT2JqZWN0UHJvcGVydHkoKQogICAgcHJvY19idXR0b246IEJ1dHRvbiA9IE9iamVjdFByb3BlcnR5KCkKCiAgICAjIG1vdmluZzogYm9vbCA9IEZhbHNlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHByb2NfaWQ6IGludCwgcGFyZW50X3RhYjogVGFiYmVkUGFuZWxJdGVtLCBwcm9jX3Bvcz1Ob25lLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi5wcm9jX2lkID0gcHJvY19pZAogICAgICAgIHNlbGYuc3RyX2lkID0gc3RyKHByb2NfaWQgKyAxKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKICAgICAgICBzZWxmLnBhcmVudF9sYXlvdXQgPSBwYXJlbnRfdGFiLmxheW91dAogICAgICAgIHNlbGYucHJvY19wb3MgPSBwcm9jX3BvcwogICAgICAgIHNlbGYubGlua3MgPSBbXQoKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYuYmluZChwb3M9c2VsZi5yZWRyYXdfbGlua3MpCgogICAgZGVmIHJlZHJhd19saW5rcyhzZWxmLCAqX2FyZ3MpOgogICAgICAgIGZvciBsaW5rIGluIHNlbGYubGlua3M6CiAgICAgICAgICAgIGxpbmsuZHJhd19saW5lKCkKCiAgICBkZWYgb25fdG91Y2hfZG93bihzZWxmLCB0b3VjaDogTW90aW9uRXZlbnQpOgogICAgICAgIGlmIHNlbGYuY29sbGlkZV9wb2ludCgqdG91Y2gucG9zKSBhbmQgbm90IHRvdWNoLmdyYWJfbGlzdDoKICAgICAgICAgICAgdG91Y2guZ3JhYihzZWxmKQoKICAgIGRlZiBvbl90b3VjaF9tb3ZlKHNlbGYsIHRvdWNoOiBNb3Rpb25FdmVudCk6CiAgICAgICAgaWYgdG91Y2guZ3JhYl9jdXJyZW50IGlzIHNlbGY6CiAgICAgICAgICAgIHNlbGYucG9zWzBdID0gbWluKHRvdWNoLnggLSB0b3VjaC54ICUgNTAsIHNlbGYucGFyZW50LnNpemVbMF0gLSBzZWxmLnBhcmVudC5zaXplWzBdICUgMzAwKQogICAgICAgICAgICBzZWxmLnBvc1sxXSA9IG1pbih0b3VjaC55IC0gdG91Y2gueSAlIDUwLCBzZWxmLnBhcmVudC5zaXplWzFdIC0gc2VsZi5wYXJlbnQuc2l6ZVsxXSAlIDMwMCkKICAgICAgICAgICAgc2VsZi5wYXJlbnRfdGFiLmdyYXBoLm5vZGVzW3NlbGYucHJvY19pZF0ubm9kZV9wb3MgPSBzZWxmLnBvcwogICAgICAgICAgICAjIHNlbGYubW92aW5nID0gVHJ1ZQoKICAgIGRlZiBvbl90b3VjaF91cChzZWxmLCB0b3VjaDogTW90aW9uRXZlbnQpOgogICAgICAgIGlmIHNlbGYuY29sbGlkZV9wb2ludCgqdG91Y2gucG9zKSBhbmQgbm90IHRvdWNoLmdyYWJfbGlzdDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5wcm9jX21lbnUub3BlbihzZWxmKQogICAgICAgICAgICBleGNlcHQgV2lkZ2V0RXhjZXB0aW9uOgogICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGVsaWYgdG91Y2guZ3JhYl9jdXJyZW50IGlzIHNlbGY6CiAgICAgICAgICAgIHRvdWNoLnVuZ3JhYihzZWxmKQogICAgICAgICAgICAjIHNlbGYubW92aW5nID0gRmFsc2UKICAgICAgICAgICAgc2VsZi5wcm9jX21lbnUub3BlbihzZWxmKQoKICAgIGRlZiBhc2tfYWRkX2xpbmsoc2VsZik6CiAgICAgICAgc2VsZi5wcm9jX21lbnUuZGlzbWlzcygpCiAgICAgICAgaWYgbGVuKHNlbGYucGFyZW50X3RhYi5wcm9jZXNzb3JzKSA8IDI6CiAgICAgICAgICAgIEVycm9yUG9wdXAoJ05vdCBlbm91Z2ggcHJvY2Vzc29ycyFcbkFkZCBhdCBsZWFzdCAyIHByb2Nlc3NvcnMnKS5vcGVuKCkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgUHJvY2Vzc29yQXNrQWRkTGluayhzZWxmLnBhcmVudF90YWIsIHNlbGYpLm9wZW4oKQoKICAgIGRlZiByZW1vdmUoc2VsZik6CiAgICAgICAgc2VsZi5wcm9jX21lbnUuZGlzbWlzcygpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiLnJlbW92ZV9wcm9jZXNzb3Ioc2VsZikK
PFByb2Nlc3NvckFza0FkZExpbms+OgogICAgZHN0X3Byb2NfaWQ6IGFza19wcm9jCgogICAgdGl0bGU6ICdFbnRlciBwcm9jZXNzb3IgaWQnCiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjAwLCAzMjAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICBwYWRkaW5nOiA1CiAgICAgICAgc3BhY2luZzogNQoKICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgdGV4dDogJ1Byb2Nlc3NvciBpZDonCiAgICAgICAgICAgICAgICBmb250X3NpemU6IDQ1CgogICAgICAgICAgICBUZXh0SW5wdXQ6CiAgICAgICAgICAgICAgICBpZDogYXNrX3Byb2MKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdBZGQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hZGRfbGluaygpCg==
ZnJvbSAucHJvY2Vzc29yX2Fza19hZGRfbGluayBpbXBvcnQgUHJvY2Vzc29yQXNrQWRkTGluawo=
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXgucG9wdXAgaW1wb3J0IFBvcHVwCmZyb20ga2l2eS51aXgudGV4dGlucHV0IGltcG9ydCBUZXh0SW5wdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBQcm9jZXNzb3JBc2tBZGRMaW5rKFBvcHVwKToKICAgIGRzdF9wcm9jX2lkOiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgc3JjX3Byb2MsICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKICAgICAgICBzZWxmLnNyY19wcm9jID0gc3JjX3Byb2MKCiAgICBkZWYgYWRkX2xpbmsoc2VsZik6CiAgICAgICAgc2VsZi5kaXNtaXNzKCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBkc3RfcHJvY19pZCA9IGludChzZWxmLmRzdF9wcm9jX2lkLnRleHQpIC0gMQogICAgICAgICAgICBpZiAobm90IDAgPD0gZHN0X3Byb2NfaWQgPCBsZW4oc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnMpKSBvciBcCiAgICAgICAgICAgICAgICAgICAgc2VsZi5zcmNfcHJvYy5wcm9jX2lkID09IGRzdF9wcm9jX2lkIG9yIFwKICAgICAgICAgICAgICAgICAgICAoc2VsZi5zcmNfcHJvYy5wcm9jX2lkLCBkc3RfcHJvY19pZCkgaW4gc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnM6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYnRHN0IFByb2MgaWQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIHtsZW4oc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnMpfScpCgogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIHZlOgogICAgICAgICAgICBFcnJvclBvcHVwKGYnTm90IGNvcnJlY3QgcHJvY2Vzc29yIGlkIVxueyIgIi5qb2luKHZlLmFyZ3MpfScpLm9wZW4oKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJlbnRfdGFiLmFkZF9saW5rKHNlbGYuc3JjX3Byb2MsIHNlbGYucGFyZW50X3RhYi5wcm9jZXNzb3JzW2RzdF9wcm9jX2lkXSkK
ZnJvbSAucHJvY2Vzc29yX2Fza19hZGRfbGluayBpbXBvcnQgUHJvY2Vzc29yQXNrQWRkTGluawo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL3Byb2Nlc3Nvci9wb3B1cHMvcHJvY2Vzc29yX2Fza19hZGRfbGluay9wcm9jZXNzb3JfYXNrX2FkZF9saW5rLmt2Cg==
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXguZmxvYXRsYXlvdXQgaW1wb3J0IEZsb2F0TGF5b3V0CmZyb20ga2l2eS51aXgubGFiZWwgaW1wb3J0IExhYmVsCmZyb20ga2l2eS5wcm9wZXJ0aWVzIGltcG9ydCBPYmplY3RQcm9wZXJ0eQoKZnJvbSBncmFwaCBpbXBvcnQgR3JhcGgKZnJvbSBpbnRlcmZhY2UucG9wdXBzIGltcG9ydCBFcnJvclBvcHVwCmZyb20gLnByb2Nlc3NvciBpbXBvcnQgUHJvY2Vzc29yCmZyb20gLmxpbmsgaW1wb3J0IExpbmssIEFza0FkZExpbmsKZnJvbSAucG9wdXBzIGltcG9ydCBDb21wdXRlclN5c3RlbVNhdmUsIENvbXB1dGVyU3lzdGVtU2F2ZU5hbWUsIENvbXB1dGVyU3lzdGVtTG9hZE5hbWUKCgpjbGFzcyBDb21wdXRlclN5c3RlbVRhYihUYWJiZWRQYW5lbEl0ZW0pOgogICAgbGF5b3V0OiBGbG9hdExheW91dCA9IE9iamVjdFByb3BlcnR5KCkKICAgIHZhbGlkYXRpb246IExhYmVsID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIHByb2Nlc3NvcnM6IGxpc3QgPSBbXQogICAgbGlua3M6IGxpc3QgPSBbXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBncmFwaDogR3JhcGgsICoqa3dhcmdzKToKICAgICAgICBzZWxmLmdyYXBoID0gZ3JhcGgKICAgICAgICBzZWxmLnN5c3RlbV90eXBlcyA9ICgnTVBQJywgJ1NNUCcpCiAgICAgICAgc2VsZi5zeXN0ZW1fdHlwZSA9IHNlbGYuc3lzdGVtX3R5cGVzWzBdCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKCiAgICBkZWYgc2V0X3N5c3RlbV90eXBlKHNlbGYsIHN5c3RlbV90eXBlOiBzdHIpOgogICAgICAgIGFzc2VydCBzeXN0ZW1fdHlwZSBpbiBzZWxmLnN5c3RlbV90eXBlcywgXAogICAgICAgICAgICBmJ1Vua25vd24gY29tcHV0ZXIgc3lzdGVtIHR5cGUhIHtzeXN0ZW1fdHlwZX0gZ2l2ZW4uIE9ubHkgeyIsICIuam9pbihzZWxmLnN5c3RlbV90eXBlcyl9IGF2YWlsYWJsZScKICAgICAgICBzZWxmLnN5c3RlbV90eXBlID0gc3lzdGVtX3R5cGUKCiAgICBkZWYgYWRkX3Byb2Nlc3NvcihzZWxmKToKICAgICAgICBuZXdfcHJvY2Vzc29yID0gUHJvY2Vzc29yKGxlbihzZWxmLnByb2Nlc3NvcnMpLCBzZWxmKQoKICAgICAgICBzZWxmLmdyYXBoLmFkZF9ub2RlKG5ld19wcm9jZXNzb3IucHJvY19pZCwgMCwgbmV3X3Byb2Nlc3Nvci5wb3MpCiAgICAgICAgc2VsZi5sYXlvdXQuYWRkX3dpZGdldChuZXdfcHJvY2Vzc29yKQogICAgICAgIHNlbGYucHJvY2Vzc29ycy5hcHBlbmQobmV3X3Byb2Nlc3NvcikKICAgICAgICBzZWxmLnZhbGlkYXRlKCkKCiAgICAgICAgcmV0dXJuIG5ld19wcm9jZXNzb3IKCiAgICBkZWYgdmFsaWRhdGUoc2VsZik6CiAgICAgICAgaWYgc2VsZi5ncmFwaC5oYXNfZ2FwcygpOgogICAgICAgICAgICBzZWxmLnZhbGlkYXRpb24udGV4dCA9ICdbY29sb3I9ZmYwMDAwXU5vdCB2YWxpZFsvY29sb3JdJwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudmFsaWRhdGlvbi50ZXh0ID0gJ1tjb2xvcj0wMGZmMDBdVmFsaWRbL2NvbG9yXScKCiAgICBkZWYgcmVtb3ZlX3Byb2Nlc3NvcihzZWxmLCBwcm9jZXNzb3I6IFByb2Nlc3Nvcik6CiAgICAgICAgc2VsZi5wcm9jZXNzb3JzLnJlbW92ZShwcm9jZXNzb3IpCiAgICAgICAgd2hpbGUgcHJvY2Vzc29yLmxpbmtzOgogICAgICAgICAgICBzZWxmLnJlbW92ZV9saW5rKHByb2Nlc3Nvci5saW5rc1swXSkKCiAgICAgICAgZm9yIF9wcm9jZXNzb3IgaW4gc2VsZi5wcm9jZXNzb3JzOgogICAgICAgICAgICBpZiBfcHJvY2Vzc29yLnByb2NfaWQgPiBwcm9jZXNzb3IucHJvY19pZDoKICAgICAgICAgICAgICAgICMgX3Byb2Nlc3Nvci5wcm9jX3BvcyA9IF9wcm9jZXNzb3IucG9zCiAgICAgICAgICAgICAgICBfcHJvY2Vzc29yLnByb2NfaWQgLT0gMQogICAgICAgICAgICAgICAgX3Byb2Nlc3Nvci5zdHJfaWQgPSBzdHIoX3Byb2Nlc3Nvci5wcm9jX2lkICsgMSkKICAgICAgICAgICAgICAgIF9wcm9jZXNzb3IucHJvY19idXR0b24udGV4dCA9IF9wcm9jZXNzb3Iuc3RyX2lkCgogICAgICAgIHNlbGYuZ3JhcGgucmVtb3ZlX25vZGUocHJvY2Vzc29yLnByb2NfaWQpCiAgICAgICAgc2VsZi5sYXlvdXQucmVtb3ZlX3dpZGdldChwcm9jZXNzb3IpCgogICAgICAgIGlmIG5vdCBzZWxmLmxheW91dC5jaGlsZHJlbjoKICAgICAgICAgICAgc2VsZi52YWxpZGF0aW9uLnRleHQgPSAnVmFsaWRhdGlvbicKCiAgICBkZWYgYXNrX2FkZF9saW5rKHNlbGYpOgogICAgICAgIGlmIGxlbihzZWxmLnByb2Nlc3NvcnMpIDwgMjoKICAgICAgICAgICAgRXJyb3JQb3B1cCgnTm90IGVub3VnaCBwcm9jZXNzb3JzIVxuQWRkIGF0IGxlYXN0IDIgcHJvY2Vzc29ycycpLm9wZW4oKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBBc2tBZGRMaW5rKHNlbGYpLm9wZW4oKQoKICAgIGRlZiBhZGRfbGluayhzZWxmLCBzcmNfcHJvYzogUHJvY2Vzc29yLCBkc3RfcHJvYzogUHJvY2Vzc29yKToKICAgICAgICBuZXdfbGluayA9IExpbmsobGVuKHNlbGYubGlua3MpLCBzZWxmLCBzcmNfcHJvYywgZHN0X3Byb2MpCgogICAgICAgIHNlbGYuZ3JhcGguYWRkX2VkZ2UobmV3X2xpbmsubGlua19pZCwgMCwgc3JjX3Byb2MucHJvY19pZCwgZHN0X3Byb2MucHJvY19pZCkKICAgICAgICBzZWxmLmxheW91dC5hZGRfd2lkZ2V0KG5ld19saW5rKQogICAgICAgIHNlbGYubGlua3MuYXBwZW5kKG5ld19saW5rKQogICAgICAgIHNlbGYudmFsaWRhdGUoKQoKICAgICAgICBzcmNfcHJvYy5saW5rcy5hcHBlbmQobmV3X2xpbmspCiAgICAgICAgZHN0X3Byb2MubGlua3MuYXBwZW5kKG5ld19saW5rKQoKICAgICAgICByZXR1cm4gbmV3X2xpbmsKCiAgICBkZWYgcmVtb3ZlX2xpbmsoc2VsZiwgbGluazogTGluayk6CiAgICAgICAgc2VsZi5saW5rcy5yZW1vdmUobGluaykKICAgICAgICBsaW5rLnNyY19wcm9jLmxpbmtzLnJlbW92ZShsaW5rKQogICAgICAgIGxpbmsuZHN0X3Byb2MubGlua3MucmVtb3ZlKGxpbmspCgogICAgICAgIGZvciBfbGluayBpbiBzZWxmLmxpbmtzOgogICAgICAgICAgICBpZiBfbGluay5saW5rX2lkID4gbGluay5saW5rX2lkOgogICAgICAgICAgICAgICAgX2xpbmsubGlua19pZCAtPSAxCgogICAgICAgIHNlbGYuZ3JhcGgucmVtb3ZlX2VkZ2UobGluay5saW5rX2lkKQogICAgICAgIHNlbGYubGF5b3V0LnJlbW92ZV93aWRnZXQobGluaykKICAgICAgICBzZWxmLnZhbGlkYXRlKCkKCiAgICBkZWYgY2xlYXJfc3lzdGVtKHNlbGYpOgogICAgICAgIHNlbGYuZ3JhcGguY2xlYXIoKQogICAgICAgIHNlbGYucHJvY2Vzc29ycy5jbGVhcigpCiAgICAgICAgc2VsZi5saW5rcy5jbGVhcigpCiAgICAgICAgc2VsZi5sYXlvdXQuY2xlYXJfd2lkZ2V0cygpCgogICAgZGVmIGFza19sb2FkKHNlbGYpOgogICAgICAgIGlmIHNlbGYubGF5b3V0LmNoaWxkcmVuOgogICAgICAgICAgICBDb21wdXRlclN5c3RlbVNhdmUoc2VsZiwgc2VsZi5hc2tfbG9hZF9uYW1lKS5vcGVuKCkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgc2VsZi5hc2tfbG9hZF9uYW1lKCkKCiAgICBkZWYgYXNrX2xvYWRfbmFtZShzZWxmKToKICAgICAgICBDb21wdXRlclN5c3RlbUxvYWROYW1lKHNlbGYpLm9wZW4oKQoKICAgIGRlZiBsb2FkKHNlbGYsIG5hbWU6IHN0cik6CiAgICAgICAgc2VsZi5jbGVhcl9zeXN0ZW0oKQogICAgICAgIHNlbGYuZGlzcGxheV9ncmFwaCgqc2VsZi5ncmFwaC5sb2FkKG5hbWUpKQoKICAgIGRlZiBhc2tfc2F2ZV9uYW1lKHNlbGYsIGNhbGxiYWNrPU5vbmUpOgogICAgICAgIGlmIG5vdCBzZWxmLmxheW91dC5jaGlsZHJlbjoKICAgICAgICAgICAgRXJyb3JQb3B1cCgnU3lzdGVtIGlzIGVtcHR5Jykub3BlbigpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIENvbXB1dGVyU3lzdGVtU2F2ZU5hbWUoc2VsZiwgY2FsbGJhY2spLm9wZW4oKQoKICAgIGRlZiBzYXZlKHNlbGYsIG5hbWU6IHN0ciwgY2FsbGJhY2s9Tm9uZSk6CiAgICAgICAgc2VsZi5ncmFwaC5zYXZlKG5hbWUsIDIsIDIpCgogICAgICAgIGlmIGNhbGxiYWNrIGlzIG5vdCBOb25lOgogICAgICAgICAgICBjYWxsYmFjaygpCgogICAgZGVmIGRpc3BsYXlfZ3JhcGgoc2VsZiwgZ3JhcGg6IEdyYXBoLCBfc2NhbGVfbGV2ZWw6IFt0dXBsZSwgbGlzdF0pOgogICAgICAgIGZvciBwX25vZGUgaW4gZ3JhcGgubm9kZXM6CiAgICAgICAgICAgIG5ld19wcm9jID0gUHJvY2Vzc29yKHBfbm9kZS5ub2RlX2lkLCBzZWxmLCBwX25vZGUubm9kZV9wb3MpCiAgICAgICAgICAgIHNlbGYubGF5b3V0LmFkZF93aWRnZXQobmV3X3Byb2MpCiAgICAgICAgICAgIHNlbGYucHJvY2Vzc29ycy5hcHBlbmQobmV3X3Byb2MpCgogICAgICAgIGZvciBsX2VkZ2UgaW4gZ3JhcGguZWRnZXM6CiAgICAgICAgICAgIHNyY19wcm9jID0gc2VsZi5wcm9jZXNzb3JzW2xfZWRnZS5zcmNfbm9kZS5ub2RlX2lkXQogICAgICAgICAgICBkc3RfcHJvYyA9IHNlbGYucHJvY2Vzc29yc1tsX2VkZ2UuZHN0X25vZGUubm9kZV9pZF0KCiAgICAgICAgICAgIG5ld19saW5rID0gTGluayhsX2VkZ2UuZWRnZV9pZCwgc2VsZiwgc3JjX3Byb2MsIGRzdF9wcm9jKQogICAgICAgICAgICBzZWxmLmxheW91dC5hZGRfd2lkZ2V0KG5ld19saW5rKQogICAgICAgICAgICBzZWxmLmxpbmtzLmFwcGVuZChuZXdfbGluaykKCiAgICAgICAgICAgIHNyY19wcm9jLmxpbmtzLmFwcGVuZChuZXdfbGluaykKICAgICAgICAgICAgZHN0X3Byb2MubGlua3MuYXBwZW5kKG5ld19saW5rKQo=
ZnJvbSAuY29tcHV0ZXJfc3lzdGVtIGltcG9ydCBDb21wdXRlclN5c3RlbVRhYgpmcm9tIC5wcm9jZXNzb3IgaW1wb3J0IFByb2Nlc3Nvcgo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL3Byb2Nlc3Nvci9wcm9jZXNzb3Iua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL2xpbmsvbGluay5rdgojOmluY2x1ZGUgaW50ZXJmYWNlL2NvbnRhaW5lci9jb21wdXRlcl9zeXN0ZW0vcG9wdXBzL3BvcHVwcy5rdgoKCjxDb21wdXRlclN5c3RlbVRhYj46CiAgICBsYXlvdXQ6IGdyYXBoX2xheW91dAogICAgdmFsaWRhdGlvbjogdmFsaWRhdGUKICAgIHNtcF9wcm9jZXNzb3JzOiBzbXBfcHJvY2Vzc29yc19jb3VudAogICAgc21wX2JhbmtzOiBzbXBfYmFua3NfY291bnQKCiAgICB0ZXh0OiAnQ29tcHV0ZXIgU3lzdGVtJwogICAgZm9udF9zaXplOiA0MAoKICAgIEJveExheW91dDoKICAgICAgICBzcGFjaW5nOiA1CgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgc2l6ZTogc2VsZi5zaXplCgogICAgICAgICAgICBGbG9hdExheW91dDoKICAgICAgICAgICAgICAgIGlkOiBncmFwaF9sYXlvdXQKICAgICAgICAgICAgICAgIHNpemU6IHNlbGYucGFyZW50LnNpemUKICAgICAgICAgICAgICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgICAgICAgICAgICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kX25vcm1hbDogJycKCiAgICAgICAgICAgICAgICBjYW52YXMuYmVmb3JlOgogICAgICAgICAgICAgICAgICAgIENvbG9yOgogICAgICAgICAgICAgICAgICAgICAgICByZ2JhOiAoMSwgMSwgMSwgMSkKICAgICAgICAgICAgICAgICAgICBSZWN0YW5nbGU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHNlbGYucG9zCgogICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICAgICAgc2l6ZV9oaW50X3g6IE5vbmUKICAgICAgICAgICAgd2lkdGg6IDYwMCAtIDYKICAgICAgICAgICAgcGFkZGluZzogMCwgMTUwCiAgICAgICAgICAgIHNwYWNpbmc6IDEwMAoKICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICBpZDogdmFsaWRhdGUKICAgICAgICAgICAgICAgIHNpemVfaGludF95OiAwLjA1CiAgICAgICAgICAgICAgICBtYXJrdXA6IFRydWUKICAgICAgICAgICAgICAgIHRleHQ6ICdWYWxpZGF0aW9uJwogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1NQoKICAgICAgICAgICAgQm94TGF5b3V0OgogICAgICAgICAgICAgICAgc2l6ZV9oaW50X3k6IDAuMDgKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwLCAyMAogICAgICAgICAgICAgICAgc3BhY2luZzogNQoKICAgICAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgICAgIHRleHQ6ICdTeXN0ZW06JwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKCiAgICAgICAgICAgICAgICBTcGlubmVyOgogICAgICAgICAgICAgICAgICAgIGlkOiBzeXN0ZW1fdHlwZQogICAgICAgICAgICAgICAgICAgIHRleHQ6IHJvb3Quc3lzdGVtX3R5cGUKICAgICAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiByb290LnN5c3RlbV90eXBlcwogICAgICAgICAgICAgICAgICAgIG9uX3RleHQ6IHJvb3Quc2V0X3N5c3RlbV90eXBlKHNlbGYudGV4dCkKCiAgICAgICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgICAgIHNpemVfaGludF95OiAwLjE3CiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgICAgICAgICAgICAgcGFkZGluZzogMTAsIDIwCiAgICAgICAgICAgICAgICBzcGFjaW5nOiA1CgogICAgICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1NNUCBzeXN0ZW0gcGFyYW1zJwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKCiAgICAgICAgICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNQogICAgICAgICAgICAgICAgICAgIHNwYWNpbmc6IDUKCiAgICAgICAgICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdQcm9jZXNzb3JzOicKICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAoKICAgICAgICAgICAgICAgICAgICBUZXh0SW5wdXQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzbXBfcHJvY2Vzc29yc19jb3VudAogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF90eXBlOiAnbnVtYmVyJwogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICAgICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA1CiAgICAgICAgICAgICAgICAgICAgc3BhY2luZzogNQoKICAgICAgICAgICAgICAgICAgICBMYWJlbDoKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0JhbmtzOicKICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAoKICAgICAgICAgICAgICAgICAgICBUZXh0SW5wdXQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzbXBfYmFua3NfY291bnQKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfdHlwZTogJ251bWJlcicKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZmlsdGVyOiAnaW50JwogICAgICAgICAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpbGluZTogRmFsc2UKCiAgICAgICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgICAgIHNpemVfaGludF95OiAwLjQ1CiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJwogICAgICAgICAgICAgICAgcGFkZGluZzogMTAsIDIwCiAgICAgICAgICAgICAgICBzcGFjaW5nOiA1CgogICAgICAgICAgICAgICAgTGFiZWw6CiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ01QUCBzeXN0ZW0gcGFyYW1zJwogICAgICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKCiAgICAgICAgICAgICAgICBCdXR0b246CiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0FkZCBwcm9jZXNzb3InCiAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QuYWRkX3Byb2Nlc3NvcigpCgogICAgICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgICAgIHRleHQ6ICdBZGQgbGluaycKICAgICAgICAgICAgICAgICAgICBmb250X3NpemU6IDQwCiAgICAgICAgICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hc2tfYWRkX2xpbmsoKQoKICAgICAgICAgICAgICAgIEJveExheW91dDoKICAgICAgICAgICAgICAgICAgICBzcGFjaW5nOiA1CgogICAgICAgICAgICAgICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0Zyb20gZmlsZScKICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza19sb2FkKCkKCiAgICAgICAgICAgICAgICAgICAgQnV0dG9uOgogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnVG8gZmlsZScKICAgICAgICAgICAgICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICAgICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LmFza19zYXZlX25hbWUoKQo=
ZnJvbSBtYXRoIGltcG9ydCBzcXJ0Cgpmcm9tIGtpdnkudWl4LmJveGxheW91dCBpbXBvcnQgQm94TGF5b3V0CmZyb20ga2l2eS51aXguYnV0dG9uIGltcG9ydCBCdXR0b24KZnJvbSBraXZ5LnVpeC5kcm9wZG93biBpbXBvcnQgRHJvcERvd24KZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5CmZyb20ga2l2eS51aXgudGFiYmVkcGFuZWwgaW1wb3J0IFRhYmJlZFBhbmVsSXRlbQoKCmNsYXNzIExpbmsoQm94TGF5b3V0KToKICAgIGxpbmtfbWVudTogRHJvcERvd24gPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBsaW5rX2J1dHRvbjogQnV0dG9uID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBsaW5rX2lkOiBpbnQsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgc3JjX3Byb2MsIGRzdF9wcm9jLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi5saW5rX2lkID0gbGlua19pZAogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKICAgICAgICBzZWxmLnNyY19wcm9jID0gc3JjX3Byb2MKICAgICAgICBzZWxmLmRzdF9wcm9jID0gZHN0X3Byb2MKCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLmRyYXdfbGluZSgpCiAgICAgICAgc2VsZi5iaW5kKHBvcz1zZWxmLmRyYXdfbGluZSkKCiAgICBkZWYgZHJhd19saW5lKHNlbGYsICpfYXJncyk6CiAgICAgICAgZGlzdGFuY2VfeCA9IHNlbGYuZHN0X3Byb2MucG9zWzBdIC0gc2VsZi5zcmNfcHJvYy5wb3NbMF0KICAgICAgICBkaXN0YW5jZV95ID0gc2VsZi5kc3RfcHJvYy5wb3NbMV0gLSBzZWxmLnNyY19wcm9jLnBvc1sxXQogICAgICAgIGRpc3RhbmNlID0gc3FydChkaXN0YW5jZV94ICoqIDIgKyBkaXN0YW5jZV95ICoqIDIpCgogICAgICAgIHNlbGYuc2l6ZSA9IChhYnMoZGlzdGFuY2VfeCksIGFicyhkaXN0YW5jZV95KSkKICAgICAgICAjIHNlbGYubGlua19idXR0b24ucG9zID0gKHNlbGYucG9zWzBdICsgc2VsZi5zaXplWzBdIC8gMiwgc2VsZi5wb3NbMV0gKyBzZWxmLnNpemVbMV0gLyAyKQoKICAgICAgICBsaW5lID0gc2VsZi5saW5rX2J1dHRvbi5jYW52YXMuYmVmb3JlLmdldF9ncm91cCgnbGluZScpWzBdCiAgICAgICAgbGluZS5wb2ludHMgPSAoCiAgICAgICAgICAgIHNlbGYuc3JjX3Byb2MucG9zWzBdICsgNzMgKyA3NSAqIGRpc3RhbmNlX3ggLyAoMCAqKiBkaXN0YW5jZSArIGRpc3RhbmNlKSwKICAgICAgICAgICAgc2VsZi5zcmNfcHJvYy5wb3NbMV0gKyA3MyArIDc1ICogZGlzdGFuY2VfeSAvICgwICoqIGRpc3RhbmNlICsgZGlzdGFuY2UpLAogICAgICAgICAgICBzZWxmLmRzdF9wcm9jLnBvc1swXSArIDczIC0gNzUgKiBkaXN0YW5jZV94IC8gKDAgKiogZGlzdGFuY2UgKyBkaXN0YW5jZSksCiAgICAgICAgICAgIHNlbGYuZHN0X3Byb2MucG9zWzFdICsgNzMgLSA3NSAqIGRpc3RhbmNlX3kgLyAoMCAqKiBkaXN0YW5jZSArIGRpc3RhbmNlKQogICAgICAgICkKCiAgICBkZWYgcmVtb3ZlKHNlbGYpOgogICAgICAgIHNlbGYubGlua19tZW51LmRpc21pc3MoKQogICAgICAgIHNlbGYucGFyZW50X3RhYi5yZW1vdmVfbGluayhzZWxmKQo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL2xpbmsvcG9wdXBzL3BvcHVwcy5rdgoKCjxMaW5rPjoKICAgIGlkOiBsaW5rCiAgICBsaW5rX2J1dHRvbjogbGlua19idXR0b24uX19zZWxmX18KICAgIGxpbmtfbWVudTogbGlua19tZW51Ll9fc2VsZl9fCgoKICAgIGJhY2tncm91bmRfY29sb3I6ICgwLCAwLCAwLCAwKQogICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCgogICAgcG9zOiBtaW4oc2VsZi5zcmNfcHJvYy5wb3NbMF0sIHNlbGYuZHN0X3Byb2MucG9zWzBdKSArIDc1LCBtaW4oc2VsZi5zcmNfcHJvYy5wb3NbMV0sIHNlbGYuZHN0X3Byb2MucG9zWzFdKSArIDc1CiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKCiAgICBCdXR0b246CiAgICAgICAgaWQ6IGxpbmtfYnV0dG9uCiAgICAgICAgYmFja2dyb3VuZF9jb2xvcjogKDAsIDAsIDAsIDApCiAgICAgICAgYmFja2dyb3VuZF9ub3JtYWw6ICcnCgogICAgICAgIG9uX3BhcmVudDogbGlua19tZW51LmRpc21pc3MoKQogICAgICAgIG9uX3JlbGVhc2U6IGxpbmtfbWVudS5vcGVuKHNlbGYpCgogICAgICAgIGNhbnZhcy5iZWZvcmU6CiAgICAgICAgICAgIENvbG9yOgogICAgICAgICAgICAgICAgcmdiYTogKDAsIDAsIDAsIDEpCiAgICAgICAgICAgIExpbmU6CiAgICAgICAgICAgICAgICBncm91cDogJ2xpbmUnCiAgICAgICAgICAgICAgICB3aWR0aDogMgoKICAgIERyb3BEb3duOgogICAgICAgIGlkOiBsaW5rX21lbnUKICAgICAgICBhdXRvX3dpZHRoOiBGYWxzZQogICAgICAgIHdpZHRoOiAyMDAKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnUmVtb3ZlIGxpbmsnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogMzAKICAgICAgICAgICAgc2l6ZV9oaW50X3k6IE5vbmUKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5yZW1vdmUoKQo=
ZnJvbSAubGluayBpbXBvcnQgTGluawpmcm9tIC5wb3B1cHMgaW1wb3J0IEFza0FkZExpbmsK
ZnJvbSAuYXNrX2FkZF9saW5rIGltcG9ydCBBc2tBZGRMaW5rCg==
ZnJvbSAuYXNrX2FkZF9saW5rIGltcG9ydCBBc2tBZGRMaW5rCg==
PEFza0FkZExpbms+OgogICAgc3JjX3Byb2NfaWQ6IGFza19zcmNfcHJvYwogICAgZHN0X3Byb2NfaWQ6IGFza19kc3RfcHJvYwoKICAgIHRpdGxlOiAnRW50ZXIgcHJvY2Vzc29ycyBpZHMnCiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjAwLCA0NTAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICBwYWRkaW5nOiA1CiAgICAgICAgc3BhY2luZzogNQoKICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgdGV4dDogJ1NyYyBQcm9jIGlkOicKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKCiAgICAgICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgICAgIGlkOiBhc2tfc3JjX3Byb2MKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCb3hMYXlvdXQ6CiAgICAgICAgICAgIExhYmVsOgogICAgICAgICAgICAgICAgdGV4dDogJ0RzdCBQcm9jIGlkOicKICAgICAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKCiAgICAgICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgICAgIGlkOiBhc2tfZHN0X3Byb2MKICAgICAgICAgICAgICAgIGlucHV0X3R5cGU6ICdudW1iZXInCiAgICAgICAgICAgICAgICBpbnB1dF9maWx0ZXI6ICdpbnQnCiAgICAgICAgICAgICAgICBmb2N1czogVHJ1ZQogICAgICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdBZGQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5hZGRfbGluaygpCg==
ZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCmZyb20ga2l2eS51aXgucG9wdXAgaW1wb3J0IFBvcHVwCmZyb20ga2l2eS51aXgudGV4dGlucHV0IGltcG9ydCBUZXh0SW5wdXQKZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBBc2tBZGRMaW5rKFBvcHVwKToKICAgIHNyY19wcm9jX2lkOiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCiAgICBkc3RfcHJvY19pZDogVGV4dElucHV0ID0gT2JqZWN0UHJvcGVydHkoKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnRfdGFiOiBUYWJiZWRQYW5lbEl0ZW0sICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKCiAgICBkZWYgYWRkX2xpbmsoc2VsZik6CiAgICAgICAgc2VsZi5kaXNtaXNzKCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzcmNfcHJvY19pZCA9IGludChzZWxmLnNyY19wcm9jX2lkLnRleHQpIC0gMQogICAgICAgICAgICBkc3RfcHJvY19pZCA9IGludChzZWxmLmRzdF9wcm9jX2lkLnRleHQpIC0gMQoKICAgICAgICAgICAgaWYgbm90IDAgPD0gc3JjX3Byb2NfaWQgPCBsZW4oc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnMpOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmJ1NyYyBQcm9jZXNzb3IgaWQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIHtsZW4oc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnMpfScpCgogICAgICAgICAgICBpZiAobm90IDAgPD0gZHN0X3Byb2NfaWQgPCBsZW4oc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnMpKSBvciBcCiAgICAgICAgICAgICAgICAgICAgc3JjX3Byb2NfaWQgPT0gZHN0X3Byb2NfaWQgb3IgKHNyY19wcm9jX2lkLCBkc3RfcHJvY19pZCkgaW4gc2VsZi5wYXJlbnRfdGFiLmxpbmtzOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmJ0RzdCBQcm9jZXNzb3IgaWQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIHtsZW4oc2VsZi5wYXJlbnRfdGFiLnByb2Nlc3NvcnMpfScpCgogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIHZlOgogICAgICAgICAgICBFcnJvclBvcHVwKGYnTm90IGNvcnJlY3QgcHJvY2Vzc29yIGlkIVxueyIgIi5qb2luKHZlLmFyZ3MpfScpLm9wZW4oKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJlbnRfdGFiLmFkZF9saW5rKHNlbGYucGFyZW50X3RhYi5wcm9jZXNzb3JzW3NyY19wcm9jX2lkXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcmVudF90YWIucHJvY2Vzc29yc1tkc3RfcHJvY19pZF0pCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL2xpbmsvcG9wdXBzL2Fza19hZGRfbGluay9hc2tfYWRkX2xpbmsua3YK
PENvbXB1dGVyU3lzdGVtU2F2ZU5hbWU+OgogICAgc3lzdGVtX25hbWU6IG5hbWUKCiAgICB0aXRsZTogJ0lucHV0IHN5c3RlbSBuYW1lJwogICAgdGl0bGVfc2l6ZTogNjAKCiAgICBzaXplX2hpbnQ6IE5vbmUsIE5vbmUKICAgIHNpemU6IDY1MCwgMzUwCgogICAgQm94TGF5b3V0OgogICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnCiAgICAgICAgcGFkZGluZzogMTAKICAgICAgICBzcGFjaW5nOiAxMAoKICAgICAgICBUZXh0SW5wdXQ6CiAgICAgICAgICAgIGlkOiBuYW1lCiAgICAgICAgICAgIGZvY3VzOiBUcnVlCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgbXVsdGlsaW5lOiBGYWxzZQoKICAgICAgICBCdXR0b246CiAgICAgICAgICAgIHRleHQ6ICdTYXZlJwogICAgICAgICAgICBmb250X3NpemU6IDUwCiAgICAgICAgICAgIHRleHRfc2l6ZTogc2VsZi5zaXplCiAgICAgICAgICAgIGhhbGlnbjogJ2NlbnRlcicKICAgICAgICAgICAgdmFsaWduOiAnbWlkZGxlJwogICAgICAgICAgICBvbl9yZWxlYXNlOiByb290LnNhdmUoKQo=
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50ZXh0aW5wdXQgaW1wb3J0IFRleHRJbnB1dApmcm9tIGtpdnkudWl4LnRhYmJlZHBhbmVsIGltcG9ydCBUYWJiZWRQYW5lbEl0ZW0KZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKCgpjbGFzcyBDb21wdXRlclN5c3RlbVNhdmVOYW1lKFBvcHVwKToKICAgIHN5c3RlbV9uYW1lOiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgY2FsbGJhY2ssICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCoqa3dhcmdzKQogICAgICAgIHNlbGYucGFyZW50X3RhYiA9IHBhcmVudF90YWIKICAgICAgICBzZWxmLmNhbGxiYWNrID0gY2FsbGJhY2sKCiAgICBkZWYgc2F2ZShzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQoKICAgICAgICBuYW1lID0gc2VsZi5zeXN0ZW1fbmFtZS50ZXh0CiAgICAgICAgaWYgbm90IG5hbWU6CiAgICAgICAgICAgIEVycm9yUG9wdXAoJ1N5c3RlbSBuYW1lIGNhbm5vdCBiZSBlbXB0eSEnKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiLnNhdmUobmFtZSwgc2VsZi5jYWxsYmFjaykK
ZnJvbSAuY29tcHV0ZXJfc3lzdGVtX3NhdmVfbmFtZSBpbXBvcnQgQ29tcHV0ZXJTeXN0ZW1TYXZlTmFtZQo=
ZnJvbSAuc2F2ZSBpbXBvcnQgQ29tcHV0ZXJTeXN0ZW1TYXZlCmZyb20gLnNhdmVfbmFtZSBpbXBvcnQgQ29tcHV0ZXJTeXN0ZW1TYXZlTmFtZQpmcm9tIC5sb2FkX25hbWUgaW1wb3J0IENvbXB1dGVyU3lzdGVtTG9hZE5hbWUK
PENvbXB1dGVyU3lzdGVtU2F2ZT46CiAgICB0aXRsZTogJ1NhdmUgc3lzdGVtPycKICAgIHRpdGxlX3NpemU6IDYwCgogICAgc2l6ZV9oaW50OiBOb25lLCBOb25lCiAgICBzaXplOiA2NTAsIDMwMAoKICAgIEJveExheW91dDoKICAgICAgICBwYWRkaW5nOiAyNQogICAgICAgIHNwYWNpbmc6IDEwCgogICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgdGV4dDogJ1llcycKICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICB0ZXh0X3NpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBoYWxpZ246ICdjZW50ZXInCiAgICAgICAgICAgIHZhbGlnbjogJ21pZGRsZScKICAgICAgICAgICAgb25fcmVsZWFzZTogcm9vdC5zYXZlKCkKCiAgICAgICAgQnV0dG9uOgogICAgICAgICAgICB0ZXh0OiAnTm8nCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgdGV4dF9zaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgaGFsaWduOiAnY2VudGVyJwogICAgICAgICAgICB2YWxpZ246ICdtaWRkbGUnCiAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3Quc2tpcCgpCg==
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50YWJiZWRwYW5lbCBpbXBvcnQgVGFiYmVkUGFuZWxJdGVtCgoKY2xhc3MgQ29tcHV0ZXJTeXN0ZW1TYXZlKFBvcHVwKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50X3RhYjogVGFiYmVkUGFuZWxJdGVtLCBjYWxsYmFjaywgKiprd2FyZ3MpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiID0gcGFyZW50X3RhYgogICAgICAgIHNlbGYuY2FsbGJhY2sgPSBjYWxsYmFjawoKICAgIGRlZiBzYXZlKHNlbGYpOgogICAgICAgIHNlbGYuZGlzbWlzcygpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiLmFza19zYXZlX25hbWUoc2VsZi5jYWxsYmFjaykKCiAgICBkZWYgc2tpcChzZWxmKToKICAgICAgICBzZWxmLmRpc21pc3MoKQogICAgICAgIHNlbGYuY2FsbGJhY2soKQo=
ZnJvbSAuY29tcHV0ZXJfc3lzdGVtX3NhdmUgaW1wb3J0IENvbXB1dGVyU3lzdGVtU2F2ZQo=
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL3BvcHVwcy9zYXZlL2NvbXB1dGVyX3N5c3RlbV9zYXZlLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvY29udGFpbmVyL2NvbXB1dGVyX3N5c3RlbS9wb3B1cHMvc2F2ZV9uYW1lL2NvbXB1dGVyX3N5c3RlbV9zYXZlX25hbWUua3YKIzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29tcHV0ZXJfc3lzdGVtL3BvcHVwcy9sb2FkX25hbWUvY29tcHV0ZXJfc3lzdGVtX2xvYWRfbmFtZS5rdgo=
ZnJvbSAuY29tcHV0ZXJfc3lzdGVtX2xvYWRfbmFtZSBpbXBvcnQgQ29tcHV0ZXJTeXN0ZW1Mb2FkTmFtZQo=
PENvbXB1dGVyU3lzdGVtTG9hZE5hbWU+OgogICAgZmlsZV9uYW1lOiBuYW1lCgogICAgdGl0bGU6ICdJbnB1dCBmaWxlIG5hbWUnCiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjUwLCAzNTAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcKICAgICAgICBwYWRkaW5nOiAxMAogICAgICAgIHNwYWNpbmc6IDEwCgogICAgICAgIFRleHRJbnB1dDoKICAgICAgICAgICAgaWQ6IG5hbWUKICAgICAgICAgICAgZm9jdXM6IFRydWUKICAgICAgICAgICAgZm9udF9zaXplOiA1MAogICAgICAgICAgICBtdWx0aWxpbmU6IEZhbHNlCgogICAgICAgIEJ1dHRvbjoKICAgICAgICAgICAgdGV4dDogJ0xvYWQnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNTAKICAgICAgICAgICAgdGV4dF9zaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgaGFsaWduOiAnY2VudGVyJwogICAgICAgICAgICB2YWxpZ246ICdtaWRkbGUnCiAgICAgICAgICAgIG9uX3JlbGVhc2U6IHJvb3QubG9hZCgpCgo=
ZnJvbSBvcyBpbXBvcnQgcGF0aAoKZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKZnJvbSBraXZ5LnVpeC50ZXh0aW5wdXQgaW1wb3J0IFRleHRJbnB1dApmcm9tIGtpdnkudWl4LnRhYmJlZHBhbmVsIGltcG9ydCBUYWJiZWRQYW5lbEl0ZW0KZnJvbSBraXZ5LnByb3BlcnRpZXMgaW1wb3J0IE9iamVjdFByb3BlcnR5Cgpmcm9tIGludGVyZmFjZS5wb3B1cHMgaW1wb3J0IEVycm9yUG9wdXAKZnJvbSBjb25maWcgaW1wb3J0IERVTVBfUEFUSAoKCmNsYXNzIENvbXB1dGVyU3lzdGVtTG9hZE5hbWUoUG9wdXApOgogICAgZmlsZV9uYW1lOiBUZXh0SW5wdXQgPSBPYmplY3RQcm9wZXJ0eSgpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudF90YWI6IFRhYmJlZFBhbmVsSXRlbSwgKiprd2FyZ3MpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5wYXJlbnRfdGFiID0gcGFyZW50X3RhYgoKICAgIGRlZiBsb2FkKHNlbGYpOgogICAgICAgIHNlbGYuZGlzbWlzcygpCgogICAgICAgIG5hbWUgPSBzZWxmLmZpbGVfbmFtZS50ZXh0CiAgICAgICAgaWYgbm90IG5hbWU6CiAgICAgICAgICAgIEVycm9yUG9wdXAoJ0ZpbGUgbmFtZSBjYW5ub3QgYmUgZW1wdHkhJykub3BlbigpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGlmIG5vdCBwYXRoLmV4aXN0cyhEVU1QX1BBVEggLyBmJ3tzZWxmLnBhcmVudF90YWIuZ3JhcGguZ3JhcGhfdHlwZX1fe25hbWV9Lmpzb24nKToKICAgICAgICAgICAgRXJyb3JQb3B1cCgnRmlsZSBub3QgZm91bmQnKS5vcGVuKCkKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHNlbGYucGFyZW50X3RhYi5sb2FkKG5hbWUpCg==
IzppbmNsdWRlIGludGVyZmFjZS9jb250YWluZXIvY29udGFpbmVyLmt2CiM6aW5jbHVkZSBpbnRlcmZhY2UvcG9wdXBzL3BvcHVwcy5rdgo=
ZnJvbSAuZXJyb3JfcG9wdXAgaW1wb3J0IEVycm9yUG9wdXAK
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKCgpjbGFzcyBFcnJvclBvcHVwKFBvcHVwKToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZXJyb3JfbXNnOiBzdHIsICoqa3dhcmdzKToKICAgICAgICBzZWxmLmVycm9yX21zZyA9IGVycm9yX21zZwogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCg==
PEVycm9yUG9wdXA+OgogICAgdGl0bGU6ICdFcnJvciEnCiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjUwLCA0MDAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgTGFiZWw6CiAgICAgICAgICAgIHRleHQ6IHJvb3QuZXJyb3JfbXNnCiAgICAgICAgICAgIGZvbnRfc2l6ZTogNDAKICAgICAgICAgICAgdGV4dF9zaXplOiBzZWxmLnNpemUKICAgICAgICAgICAgaGFsaWduOiAnY2VudGVyJwogICAgICAgICAgICB2YWxpZ246ICdtaWRkbGUnCg==
ZnJvbSBraXZ5LnVpeC5wb3B1cCBpbXBvcnQgUG9wdXAKCgpjbGFzcyBJbmZvUG9wdXAoUG9wdXApOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB0aXRsZTogc3RyLCBpbmZvX21zZzogc3RyLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi50aXRsZSA9IHRpdGxlCiAgICAgICAgc2VsZi5pbmZvX21zZyA9IGluZm9fbXNnCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykK
PEluZm9Qb3B1cD46CiAgICB0aXRsZV9zaXplOiA2MAoKICAgIHNpemVfaGludDogTm9uZSwgTm9uZQogICAgc2l6ZTogNjUwLCA0MDAKCiAgICBCb3hMYXlvdXQ6CiAgICAgICAgTGFiZWw6CiAgICAgICAgICAgIHRleHQ6IHJvb3QuaW5mb19tc2cKICAgICAgICAgICAgZm9udF9zaXplOiA0MAogICAgICAgICAgICB0ZXh0X3NpemU6IHNlbGYuc2l6ZQogICAgICAgICAgICBoYWxpZ246ICdjZW50ZXInCiAgICAgICAgICAgIHZhbGlnbjogJ21pZGRsZScK
ZnJvbSAuaW5mb19wb3B1cCBpbXBvcnQgSW5mb1BvcHVwCg==
ZnJvbSAuZXJyb3JfcG9wdXAgaW1wb3J0IEVycm9yUG9wdXAKZnJvbSAuaW5mb19wb3B1cCBpbXBvcnQgSW5mb1BvcHVwCg==
IzppbmNsdWRlIGludGVyZmFjZS9wb3B1cHMvZXJyb3JfcG9wdXAvZXJyb3JfcG9wdXAua3YKIzppbmNsdWRlIGludGVyZmFjZS9wb3B1cHMvaW5mb19wb3B1cC9pbmZvX3BvcHVwLmt2Cg==
ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgoKRFVNUF9QQVRIID0gUGF0aCgnZ3JhcGgvZHVtcHMnKQo=
Y2xhc3MgRWRnZToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZWRnZV9pZDogaW50LCBlZGdlX3dlaWdodDogaW50LCBzcmNfbm9kZSwgZHN0X25vZGUpOgogICAgICAgIHNlbGYuZWRnZV9pZCA9IGVkZ2VfaWQKICAgICAgICBzZWxmLndlaWdodCA9IGVkZ2Vfd2VpZ2h0CiAgICAgICAgc2VsZi5zcmNfbm9kZSA9IHNyY19ub2RlCiAgICAgICAgc2VsZi5kc3Rfbm9kZSA9IGRzdF9ub2RlCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIChmJ0VkZ2Uge3NlbGYuZWRnZV9pZH0gfCBXZWlnaHQoe3NlbGYud2VpZ2h0fSkgfCAnCiAgICAgICAgICAgICAgICBmJ1NyYyh7c2VsZi5zcmNfbm9kZS5ub2RlX2lkfSkgfCBEc3Qoe3NlbGYuZHN0X25vZGUubm9kZV9pZH0pJykK

ZnJvbSAuZ3JhcGggaW1wb3J0IEdyYXBoCg==
ZnJvbSBqc29uIGltcG9ydCBKU09ORW5jb2RlcgoKZnJvbSAubm9kZSBpbXBvcnQgTm9kZQpmcm9tIC5lZGdlIGltcG9ydCBFZGdlCgoKY2xhc3MgRW5jb2RlcihKU09ORW5jb2Rlcik6CgogICAgZGVmIGRlZmF1bHQoc2VsZiwgbyk6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvLCBOb2RlKToKICAgICAgICAgICAgcmV0dXJuIHsnbm9kZV9pZCc6IG8ubm9kZV9pZCwgJ25vZGVfd2VpZ2h0Jzogby53ZWlnaHQsICdub2RlX3Bvcyc6IG8ubm9kZV9wb3N9CgogICAgICAgIGlmIGlzaW5zdGFuY2UobywgRWRnZSk6CiAgICAgICAgICAgIHJldHVybiB7J2VkZ2VfaWQnOiBvLmVkZ2VfaWQsICdlZGdlX3dlaWdodCc6IG8ud2VpZ2h0LCAnc3JjX25vZGVfaWQnOiBvLnNyY19ub2RlLm5vZGVfaWQsCiAgICAgICAgICAgICAgICAgICAgJ2RzdF9ub2RlX2lkJzogby5kc3Rfbm9kZS5ub2RlX2lkfQoKICAgICAgICByZXR1cm4gSlNPTkVuY29kZXIuZGVmYXVsdChzZWxmLCBvKQo=
Y2xhc3MgTm9kZToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbm9kZV9pZDogaW50LCBub2RlX3dlaWdodDogaW50LCBub2RlX3BvczogdHVwbGUpOgogICAgICAgIHNlbGYubm9kZV9pZCA9IG5vZGVfaWQKICAgICAgICBzZWxmLndlaWdodCA9IG5vZGVfd2VpZ2h0CiAgICAgICAgc2VsZi5ub2RlX3BvcyA9IG5vZGVfcG9zCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGYnTm9kZSB7c2VsZi5ub2RlX2lkfSB8IFdlaWdodCh7c2VsZi53ZWlnaHR9KSB8IFBvcyh7c2VsZi5ub2RlX3Bvc30pJwo=
ZnJvbSBncmFwaCBpbXBvcnQgR3JhcGgKZnJvbSBpbnRlcmZhY2UgaW1wb3J0IExhYkludGVyZmFjZUFwcAoKCmNsYXNzIE1haW46CgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYudGFza19ncmFwaCA9IEdyYXBoKCdUYXNrJykKICAgICAgICBzZWxmLmNzX2dyYXBoID0gR3JhcGgoJ1N5c3RlbScpCiAgICAgICAgc2VsZi5pbnRlcmZhY2UgPSBMYWJJbnRlcmZhY2VBcHAoc2VsZi50YXNrX2dyYXBoLCBzZWxmLmNzX2dyYXBoKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgc2VsZi5pbnRlcmZhY2UucnVuKCkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgTWFpbigpLnJ1bigpCg==
